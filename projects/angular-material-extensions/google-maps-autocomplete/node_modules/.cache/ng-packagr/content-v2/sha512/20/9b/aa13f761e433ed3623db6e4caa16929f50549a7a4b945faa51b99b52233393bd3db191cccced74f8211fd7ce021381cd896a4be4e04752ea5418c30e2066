{"hash":"0825e837db119b69c8f76cb48edfa8846cb48a70","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { forwardRef, Directive, EventEmitter, Component, ViewChild, Input, Output, PLATFORM_ID, Inject, HostListener, NgModule } from '@angular/core';\nimport * as i1$1 from '@angular/forms';\nimport { NG_VALIDATORS, UntypedFormControl, Validators, NG_VALUE_ACCESSOR, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport * as i1 from '@agm/core';\nimport * as i2 from '@angular/common';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\nimport * as i4 from '@angular/material/form-field';\nimport * as i5 from '@angular/material/input';\nimport { MatInputModule } from '@angular/material/input';\nimport { animation, style, animate, trigger, transition, useAnimation, state, query, stagger, animateChild } from '@angular/animations';\nimport { distinctUntilChanged, debounceTime, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport * as i3 from '@angular/flex-layout/flex';\nimport * as i6 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\nfunction parseGermanAddress(placeResult) {\n    const germanAddress = {\n        gmID: placeResult.id,\n        icon: placeResult.icon,\n        url: placeResult.url,\n        placeID: placeResult.place_id,\n        displayAddress: placeResult.formatted_address,\n        name: placeResult.name,\n        vicinity: placeResult.vicinity,\n        locality: {},\n        state: {},\n        country: {},\n        geoLocation: { latitude: -1, longitude: -1 },\n    };\n    if (placeResult.geometry && placeResult.geometry.location) {\n        germanAddress.geoLocation.latitude = placeResult.geometry.location.lat();\n        germanAddress.geoLocation.longitude = placeResult.geometry.location.lng();\n    }\n    if (placeResult.address_components && placeResult.address_components.length > 0) {\n        placeResult.address_components.forEach(value => {\n            if (value.types.indexOf('street_number') > -1) {\n                germanAddress.streetNumber = value.short_name;\n            }\n            if (value.types.indexOf('route') > -1) {\n                germanAddress.streetName = value.long_name;\n            }\n            if (value.types.indexOf('postal_code') > -1) {\n                germanAddress.postalCode = Number(value.short_name);\n            }\n            if (value.types.indexOf('sublocality') > -1) {\n                germanAddress.sublocality = value.long_name;\n            }\n            if (value.types.indexOf('locality') > -1) {\n                germanAddress.locality.long = value.long_name;\n                germanAddress.locality.short = value.short_name;\n            }\n            if (value.types.indexOf('administrative_area_level_1') > -1) {\n                germanAddress.state.long = value.long_name;\n                germanAddress.state.short = value.short_name;\n            }\n            if (value.types.indexOf('country') > -1) {\n                germanAddress.country.long = value.long_name;\n                germanAddress.country.short = value.short_name;\n            }\n            if (value.types.indexOf('administrative_area_level_3') > -1) {\n                germanAddress.locality.short = value.short_name;\n            }\n        });\n    }\n    return germanAddress;\n}\n\n// https://github.com/angular/angular/blob/master/packages/forms/src/directives/validators.ts\nclass MatValidateAddressDirective {\n    constructor() {\n    }\n    validate() {\n        return (control) => {\n            return this.address ? null : {\n                validateAddress: {\n                    valid: false\n                }\n            };\n        };\n    }\n    subscribe(eventEmitter) {\n        this.subscription = eventEmitter.subscribe((address) => {\n            this.address = address;\n        });\n    }\n    unsubscribe() {\n        this.subscription.unsubscribe();\n    }\n    get address() {\n        return this._address;\n    }\n    set address(value) {\n        this._address = value;\n    }\n}\nMatValidateAddressDirective.ɵfac = function MatValidateAddressDirective_Factory(t) { return new (t || MatValidateAddressDirective)(); };\nMatValidateAddressDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: MatValidateAddressDirective, selectors: [[\"\", \"mat-address-validate\", \"\", \"formControlName\", \"\"], [\"\", \"MatValidateAddress\", \"\", \"formControl\", \"\"], [\"\", \"MatValidateAddress\", \"\", \"ngModel\", \"\"]], features: [i0.ɵɵProvidersFeature([\n            { provide: NG_VALIDATORS, useExisting: forwardRef(() => MatValidateAddressDirective), multi: true }\n        ])] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatValidateAddressDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-address-validate][formControlName],[MatValidateAddress][formControl],[MatValidateAddress][ngModel]',\n                providers: [\n                    { provide: NG_VALIDATORS, useExisting: forwardRef(() => MatValidateAddressDirective), multi: true }\n                ]\n            }]\n    }], function () { return []; }, null); })();\n\nconst _c0$1 = [\"search\"];\nfunction MatGoogleMapsAutocompleteComponent_mat_error_5_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.requiredErrorText, \" \");\n} }\nfunction MatGoogleMapsAutocompleteComponent_mat_error_6_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.invalidErrorText, \" \");\n} }\nvar Appearance;\n(function (Appearance) {\n    Appearance[\"STANDARD\"] = \"standard\";\n    Appearance[\"FILL\"] = \"fill\";\n    Appearance[\"OUTLINE\"] = \"outline\";\n    Appearance[\"LEGACY\"] = \"legacy\";\n})(Appearance || (Appearance = {}));\nclass MatGoogleMapsAutocompleteComponent {\n    constructor(mapsAPILoader, ngZone) {\n        this.mapsAPILoader = mapsAPILoader;\n        this.ngZone = ngZone;\n        this.addressLabelText = 'Address';\n        this.placeholderText = 'Please enter the address';\n        this.requiredErrorText = 'The address is required';\n        this.invalidErrorText = 'The address is not valid';\n        this.appearance = Appearance.STANDARD;\n        this.autoCompleteOptions = {};\n        this.onChange = new EventEmitter();\n        this.onAutocompleteSelected = new EventEmitter();\n        this.onGermanAddressMapped = new EventEmitter();\n        this.onLocationSelected = new EventEmitter();\n        this.onNewPlaceResult = new EventEmitter();\n        this.addressValidator = new MatValidateAddressDirective();\n        this.addressSearchControl = new UntypedFormControl({ value: null }, Validators.compose([\n            Validators.required,\n            this.addressValidator.validate()\n        ]));\n        this.propagateChange = (_) => {\n        };\n    }\n    ngOnInit() {\n        this.addressValidator.subscribe(this.onNewPlaceResult);\n        const options = {\n            // types: ['address'],\n            // componentRestrictions: {country: this.country},\n            placeIdOnly: this.placeIdOnly,\n            strictBounds: this.strictBounds,\n            // types: this.types,\n            type: this.type\n        };\n        // tslint:disable-next-line:no-unused-expression\n        this.country ? options.componentRestrictions = { country: this.country } : null;\n        // tslint:disable-next-line:no-unused-expression\n        this.country ? options.types = this.types : null;\n        this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);\n        this.initGoogleMapsAutocomplete();\n    }\n    initGoogleMapsAutocomplete() {\n        this.mapsAPILoader\n            .load()\n            .then(() => {\n            const autocomplete = new google.maps.places.Autocomplete(this.searchElementRef.nativeElement, this.autoCompleteOptions);\n            autocomplete.addListener('place_changed', () => {\n                this.ngZone.run(() => {\n                    // get the place result\n                    const place = autocomplete.getPlace();\n                    const germanAddress = {\n                        gmID: place.id,\n                        icon: place.icon,\n                        url: place.url,\n                        placeID: place.place_id,\n                        displayAddress: place.formatted_address,\n                        name: place.name,\n                        vicinity: place.vicinity,\n                        locality: {},\n                        state: {},\n                        country: {},\n                        geoLocation: { latitude: -1, longitude: -1 },\n                    };\n                    if (place.geometry && place.geometry.location) {\n                        germanAddress.geoLocation.latitude = place.geometry.location.lat();\n                        germanAddress.geoLocation.longitude = place.geometry.location.lng();\n                    }\n                    if (place.address_components) {\n                        place.address_components.forEach(value => {\n                            if (value.types.indexOf('street_number') > -1) {\n                                germanAddress.streetNumber = value.short_name;\n                            }\n                            if (value.types.indexOf('route') > -1) {\n                                germanAddress.streetName = value.long_name;\n                            }\n                            if (value.types.indexOf('postal_code') > -1) {\n                                germanAddress.postalCode = Number(value.short_name);\n                            }\n                            if (value.types.indexOf('sublocality') > -1) {\n                                germanAddress.sublocality = value.long_name;\n                            }\n                            if (value.types.indexOf('locality') > -1) {\n                                germanAddress.locality.long = value.long_name;\n                                germanAddress.locality.short = value.short_name;\n                            }\n                            if (value.types.indexOf('administrative_area_level_1') > -1) {\n                                germanAddress.state.long = value.long_name;\n                                germanAddress.state.short = value.short_name;\n                            }\n                            if (value.types.indexOf('country') > -1) {\n                                germanAddress.country.long = value.long_name;\n                                germanAddress.country.short = value.short_name;\n                            }\n                            if (value.types.indexOf('administrative_area_level_3') > -1) {\n                                germanAddress.locality.short = value.short_name;\n                            }\n                        });\n                    }\n                    this.onGermanAddressMapped.emit(germanAddress);\n                    if (!place.place_id || place.geometry === undefined || place.geometry === null) {\n                        // place result is not valid\n                        return;\n                    }\n                    else {\n                        // show dialog to select a address from the input\n                        // emit failed event\n                        this.value = place;\n                        this.propagateChange(this.value);\n                    }\n                    this.address = place.formatted_address;\n                    this.onAutocompleteSelected.emit(place);\n                    // console.log('onAutocompleteSelected -> ', place);\n                    this.onLocationSelected.emit({\n                        latitude: place.geometry.location.lat(),\n                        longitude: place.geometry.location.lng()\n                    });\n                });\n            });\n        })\n            .catch((err) => console.log(err));\n    }\n    onQuery(event) {\n        // console.log('onChange()', event);\n        this.onChange.emit(this.address);\n    }\n    resetAddress() {\n        this.address = null;\n        this.addressSearchControl.updateValueAndValidity();\n    }\n    writeValue(obj) {\n        if (obj) {\n            this.value = obj;\n        }\n    }\n    registerOnChange(fn) {\n        this.propagateChange = fn;\n    }\n    registerOnTouched(fn) {\n        throw new Error('Method not implemented.');\n    }\n    setDisabledState(isDisabled) {\n        throw new Error('Method not implemented.');\n    }\n}\nMatGoogleMapsAutocompleteComponent.ɵfac = function MatGoogleMapsAutocompleteComponent_Factory(t) { return new (t || MatGoogleMapsAutocompleteComponent)(i0.ɵɵdirectiveInject(i1.MapsAPILoader), i0.ɵɵdirectiveInject(i0.NgZone)); };\nMatGoogleMapsAutocompleteComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: MatGoogleMapsAutocompleteComponent, selectors: [[\"mat-google-maps-autocomplete\"]], viewQuery: function MatGoogleMapsAutocompleteComponent_Query(rf, ctx) { if (rf & 1) {\n        i0.ɵɵviewQuery(_c0$1, 5);\n    } if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.searchElementRef = _t.first);\n    } }, inputs: { addressLabelText: \"addressLabelText\", placeholderText: \"placeholderText\", requiredErrorText: \"requiredErrorText\", invalidErrorText: \"invalidErrorText\", appearance: \"appearance\", value: \"value\", address: \"address\", country: \"country\", placeIdOnly: \"placeIdOnly\", strictBounds: \"strictBounds\", types: \"types\", type: \"type\", autoCompleteOptions: \"autoCompleteOptions\" }, outputs: { onChange: \"onChange\", onAutocompleteSelected: \"onAutocompleteSelected\", onGermanAddressMapped: \"onGermanAddressMapped\", onLocationSelected: \"onLocationSelected\" }, exportAs: [\"matGoogleMapsAutocomplete\"], features: [i0.ɵɵProvidersFeature([\n            {\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: forwardRef(() => MatGoogleMapsAutocompleteComponent),\n                multi: true\n            }\n        ])], decls: 7, vars: 6, consts: [[1, \"full-width\", 3, \"appearance\"], [\"matInput\", \"\", \"MatValidateAddress\", \"\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"placeholder\", \"ngModelChange\", \"change\"], [\"search\", \"\"], [4, \"ngIf\"]], template: function MatGoogleMapsAutocompleteComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-form-field\", 0)(1, \"mat-label\");\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"input\", 1, 2);\n        i0.ɵɵlistener(\"ngModelChange\", function MatGoogleMapsAutocompleteComponent_Template_input_ngModelChange_3_listener($event) { return ctx.address = $event; })(\"change\", function MatGoogleMapsAutocompleteComponent_Template_input_change_3_listener($event) { return ctx.onQuery($event); });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(5, MatGoogleMapsAutocompleteComponent_mat_error_5_Template, 2, 1, \"mat-error\", 3);\n        i0.ɵɵtemplate(6, MatGoogleMapsAutocompleteComponent_mat_error_6_Template, 2, 1, \"mat-error\", 3);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"appearance\", ctx.appearance);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.addressLabelText);\n        i0.ɵɵadvance(1);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", ctx.placeholderText);\n        i0.ɵɵproperty(\"ngModel\", ctx.address);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.addressSearchControl.hasError(\"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.addressSearchControl.hasError(\"validateAddress\"));\n    } }, dependencies: [i2.NgIf, i1$1.DefaultValueAccessor, i1$1.NgControlStatus, i1$1.RequiredValidator, i1$1.NgModel, i4.MatError, i4.MatFormField, i4.MatLabel, i5.MatInput, MatValidateAddressDirective], styles: [\".full-width[_ngcontent-%COMP%]{width:100%}\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGoogleMapsAutocompleteComponent, [{\n        type: Component,\n        args: [{ selector: 'mat-google-maps-autocomplete', exportAs: 'matGoogleMapsAutocomplete', providers: [\n                    {\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: forwardRef(() => MatGoogleMapsAutocompleteComponent),\n                        multi: true\n                    }\n                ], template: \"<mat-form-field class=\\\"full-width\\\" [appearance]=\\\"appearance\\\">\\n  <mat-label>{{addressLabelText}}</mat-label>\\n  <input matInput\\n         [(ngModel)]=\\\"address\\\"\\n         (change)=\\\"onQuery($event)\\\"\\n         placeholder=\\\"{{placeholderText}}\\\"\\n         class=\\\"form-control\\\"\\n         #search\\n         MatValidateAddress\\n         required>\\n  <mat-error *ngIf=\\\"addressSearchControl.hasError('required')\\\">\\n    {{requiredErrorText}}\\n  </mat-error>\\n  <mat-error *ngIf=\\\"addressSearchControl.hasError('validateAddress')\\\">\\n    {{invalidErrorText}}\\n  </mat-error>\\n</mat-form-field>\\n\", styles: [\".full-width{width:100%}\\n\"] }]\n    }], function () { return [{ type: i1.MapsAPILoader }, { type: i0.NgZone }]; }, { searchElementRef: [{\n            type: ViewChild,\n            args: ['search']\n        }], addressLabelText: [{\n            type: Input\n        }], placeholderText: [{\n            type: Input\n        }], requiredErrorText: [{\n            type: Input\n        }], invalidErrorText: [{\n            type: Input\n        }], appearance: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], address: [{\n            type: Input\n        }], country: [{\n            type: Input\n        }], placeIdOnly: [{\n            type: Input\n        }], strictBounds: [{\n            type: Input\n        }], types: [{\n            type: Input\n        }], type: [{\n            type: Input\n        }], autoCompleteOptions: [{\n            type: Input\n        }], onChange: [{\n            type: Output\n        }], onAutocompleteSelected: [{\n            type: Output\n        }], onGermanAddressMapped: [{\n            type: Output\n        }], onLocationSelected: [{\n            type: Output\n        }] }); })();\n\nconst customAnimation = animation([\n    style({\n        opacity: '{{opacity}}',\n        transform: 'scale({{scale}}) translate3d({{x}}, {{y}}, {{z}})'\n    }),\n    animate('{{duration}} {{delay}} cubic-bezier(0.0, 0.0, 0.2, 1)', style('*'))\n], {\n    params: {\n        duration: '200ms',\n        delay: '0ms',\n        opacity: '0',\n        scale: '1',\n        x: '0',\n        y: '0',\n        z: '0'\n    }\n});\nconst InputAnimations = [\n    trigger('animate', [transition('void => *', [useAnimation(customAnimation)])]),\n    trigger('animateStagger', [\n        state('50', style('*')),\n        state('100', style('*')),\n        state('200', style('*')),\n        transition('void => 50', query('@*', [stagger('50ms', [animateChild()])], { optional: true })),\n        transition('void => 100', query('@*', [stagger('100ms', [animateChild()])], { optional: true })),\n        transition('void => 200', query('@*', [stagger('200ms', [animateChild()])], { optional: true }))\n    ]),\n];\n\nclass MatGoogleMapsAutocompleteDirective {\n    constructor(platformId, elemRef, mapsAPILoader, cf, ngZone) {\n        this.platformId = platformId;\n        this.elemRef = elemRef;\n        this.mapsAPILoader = mapsAPILoader;\n        this.cf = cf;\n        this.ngZone = ngZone;\n        this.autoCompleteOptions = {};\n        this.onChange = new EventEmitter();\n        this.onAutocompleteSelected = new EventEmitter();\n        this.onGermanAddressMapped = new EventEmitter();\n        this.onLocationSelected = new EventEmitter();\n        this.onNewPlaceResult = new EventEmitter();\n        this.propagateChange = (_) => {\n        };\n    }\n    get value() {\n        return this._value;\n    }\n    set value(value) {\n        this._value = value;\n        this.propagateChange(this.value);\n        this.cf.markForCheck();\n    }\n    ngOnInit() {\n        console.log('validator', this);\n        if (isPlatformBrowser(this.platformId)) {\n            const options = {\n                // types: ['address'],\n                // componentRestrictions: {country: this.country},\n                placeIdOnly: this.placeIdOnly,\n                strictBounds: this.strictBounds,\n                // types: this.types,\n                type: this.type\n            };\n            // tslint:disable-next-line:no-unused-expression\n            this.country ? options.componentRestrictions = { country: this.country } : null;\n            // tslint:disable-next-line:no-unused-expression\n            this.country ? options.types = this.types : null;\n            this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);\n            this.initGoogleMapsAutocomplete();\n        }\n    }\n    validate(fc) {\n        return fc.hasValidator(Validators.required) ? !!fc?.value : true;\n    }\n    onChangeInputValue() {\n        const value = this.elemRef.nativeElement?.value;\n        this.value = value;\n    }\n    initGoogleMapsAutocomplete() {\n        this.mapsAPILoader\n            .load()\n            .then(() => {\n            const autocomplete = new google.maps.places.Autocomplete(this.elemRef.nativeElement, this.autoCompleteOptions);\n            autocomplete.addListener('place_changed', () => {\n                this.ngZone.run(() => {\n                    // get the place result\n                    const place = autocomplete.getPlace();\n                    const germanAddress = {\n                        gmID: place.id,\n                        icon: place.icon,\n                        url: place.url,\n                        placeID: place.place_id,\n                        displayAddress: place.formatted_address,\n                        name: place.name,\n                        vicinity: place.vicinity,\n                        locality: {},\n                        state: {},\n                        country: {},\n                        geoLocation: { latitude: -1, longitude: -1 },\n                    };\n                    if (place.geometry && place.geometry.location) {\n                        germanAddress.geoLocation.latitude = place.geometry.location.lat();\n                        germanAddress.geoLocation.longitude = place.geometry.location.lng();\n                    }\n                    place.address_components.forEach(value => {\n                        if (value.types.indexOf('street_number') > -1) {\n                            germanAddress.streetNumber = value.short_name;\n                        }\n                        if (value.types.indexOf('route') > -1) {\n                            germanAddress.streetName = value.long_name;\n                        }\n                        if (value.types.indexOf('postal_code') > -1) {\n                            germanAddress.postalCode = Number(value.short_name);\n                        }\n                        if (value.types.indexOf('sublocality') > -1) {\n                            germanAddress.sublocality = value.long_name;\n                        }\n                        if (value.types.indexOf('locality') > -1) {\n                            germanAddress.locality.long = value.long_name;\n                            germanAddress.locality.short = value.short_name;\n                        }\n                        if (value.types.indexOf('administrative_area_level_1') > -1) {\n                            germanAddress.state.long = value.long_name;\n                            germanAddress.state.short = value.short_name;\n                        }\n                        if (value.types.indexOf('country') > -1) {\n                            germanAddress.country.long = value.long_name;\n                            germanAddress.country.short = value.short_name;\n                        }\n                        if (value.types.indexOf('administrative_area_level_3') > -1) {\n                            germanAddress.locality.short = value.short_name;\n                        }\n                    });\n                    this.onGermanAddressMapped.emit(germanAddress);\n                    this.value = place.formatted_address;\n                    this.address = place.formatted_address;\n                    this.onAutocompleteSelected.emit(place);\n                    this.onLocationSelected.emit({\n                        latitude: place.geometry.location.lat(),\n                        longitude: place.geometry.location.lng()\n                    });\n                });\n            });\n        })\n            .catch((err) => console.log(err));\n    }\n    registerOnChange(fn) {\n        this.propagateChange = fn;\n    }\n    registerOnTouched(fn) {\n    }\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    writeValue(obj) {\n        if (obj) {\n            this.value = obj;\n        }\n    }\n}\nMatGoogleMapsAutocompleteDirective.ɵfac = function MatGoogleMapsAutocompleteDirective_Factory(t) { return new (t || MatGoogleMapsAutocompleteDirective)(i0.ɵɵdirectiveInject(PLATFORM_ID), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.MapsAPILoader), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone)); };\nMatGoogleMapsAutocompleteDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: MatGoogleMapsAutocompleteDirective, selectors: [[\"\", \"matGoogleMapsAutocomplete\", \"\"]], hostBindings: function MatGoogleMapsAutocompleteDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        i0.ɵɵlistener(\"change\", function MatGoogleMapsAutocompleteDirective_change_HostBindingHandler() { return ctx.onChangeInputValue(); });\n    } }, inputs: { address: \"address\", country: \"country\", placeIdOnly: \"placeIdOnly\", strictBounds: \"strictBounds\", types: \"types\", type: \"type\", autoCompleteOptions: \"autoCompleteOptions\", value: \"value\" }, outputs: { onChange: \"onChange\", onAutocompleteSelected: \"onAutocompleteSelected\", onGermanAddressMapped: \"onGermanAddressMapped\", onLocationSelected: \"onLocationSelected\" }, exportAs: [\"matGoogleMapsAutocomplete\"], features: [i0.ɵɵProvidersFeature([\n            {\n                provide: NG_VALIDATORS,\n                useExisting: forwardRef(() => MatGoogleMapsAutocompleteDirective),\n                multi: true\n            }\n        ])] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGoogleMapsAutocompleteDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[matGoogleMapsAutocomplete]',\n                exportAs: 'matGoogleMapsAutocomplete',\n                providers: [\n                    {\n                        provide: NG_VALIDATORS,\n                        useExisting: forwardRef(() => MatGoogleMapsAutocompleteDirective),\n                        multi: true\n                    }\n                ]\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }, { type: i0.ElementRef }, { type: i1.MapsAPILoader }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }]; }, { address: [{\n            type: Input\n        }], country: [{\n            type: Input\n        }], placeIdOnly: [{\n            type: Input\n        }], strictBounds: [{\n            type: Input\n        }], types: [{\n            type: Input\n        }], type: [{\n            type: Input\n        }], autoCompleteOptions: [{\n            type: Input\n        }], onChange: [{\n            type: Output\n        }], onAutocompleteSelected: [{\n            type: Output\n        }], onGermanAddressMapped: [{\n            type: Output\n        }], onLocationSelected: [{\n            type: Output\n        }], value: [{\n            type: Input\n        }], onChangeInputValue: [{\n            type: HostListener,\n            args: ['change']\n        }] }); })();\n\nconst _c0 = function () { return { y: \"100%\" }; };\nconst _c1 = function (a1) { return { value: \"*\", params: a1 }; };\nfunction MatSearchGoogleMapsAutocompleteComponent_div_1_Template(rf, ctx) { if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 14)(1, \"mat-form-field\", 11)(2, \"mat-label\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"input\", 15);\n    i0.ɵɵlistener(\"onAutocompleteSelected\", function MatSearchGoogleMapsAutocompleteComponent_div_1_Template_input_onAutocompleteSelected_4_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r2 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r2.syncAutoComplete($event)); });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"mat-icon\", 13);\n    i0.ɵɵtext(6, \"search\");\n    i0.ɵɵelementEnd()()();\n} if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"appearance\", ctx_r0.searchBarAppearance)(\"@animate\", i0.ɵɵpureFunction1(9, _c1, i0.ɵɵpureFunction0(8, _c0)));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.searchAddressLabel);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"country\", ctx_r0.country)(\"placeIdOnly\", ctx_r0.placeIdOnly)(\"strictBounds\", ctx_r0.strictBounds)(\"types\", ctx_r0.types)(\"type\", ctx_r0.type);\n} }\nfunction MatSearchGoogleMapsAutocompleteComponent_mat_form_field_17_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-form-field\", 11)(1, \"mat-label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 16);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"appearance\", ctx_r1.appearance)(\"@animate\", i0.ɵɵpureFunction1(5, _c1, i0.ɵɵpureFunction0(4, _c0)));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.vicinityLabel);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"readonly\", ctx_r1.readonly);\n} }\nclass MatSearchGoogleMapsAutocompleteComponent {\n    constructor(formBuilder) {\n        this.formBuilder = formBuilder;\n        this.appearance = Appearance.STANDARD;\n        this.searchAddressLabel = 'Search Address';\n        this.streetNameLabel = 'Street';\n        this.streetNumberLabel = 'Nr.';\n        this.postalCodeLabel = 'PLZ';\n        this.localityLabel = 'Locality';\n        this.vicinityLabel = 'Vicinity';\n        this.onGermanAddressMapped = new EventEmitter();\n        this.firstInit = true;\n        this.propagateChange = (_) => {\n        };\n        // Set the private defaults\n        this._unsubscribeAll = new Subject();\n    }\n    get value() {\n        return this._value;\n    }\n    set value(value) {\n        this._value = value;\n        this.propagateChange(this.value);\n        // console.log('setValue', this._value);\n    }\n    ngOnInit() {\n        this.createAddressFormGroup();\n        this.enableCustomInput();\n    }\n    createAddressFormGroup() {\n        this.addressFormGroup = this.formBuilder.group({\n            streetName: [this.value && this.value.streetName ? this.value.streetName : null, Validators.required],\n            streetNumber: [this.value && this.value.streetNumber ? this.value.streetNumber : null, Validators.required],\n            postalCode: [this.value && this.value.postalCode ? this.value.postalCode : null, Validators.required],\n            vicinity: [this.value && this.value.vicinity ? this.value.vicinity : null],\n            locality: this.formBuilder.group({\n                long: [this.value && this.value.locality && this.value.locality.long ? this.value.locality.long : null, Validators.required],\n            }),\n        });\n    }\n    enableCustomInput() {\n        this.addressFormGroup\n            .get('streetName')\n            .valueChanges\n            .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))\n            .subscribe(streetName => {\n            !this.value ? this.value = { streetName } : this.value.streetName = streetName;\n            this.value.displayAddress = this.parseDisplayAddress();\n            this.propagateChange(this.value);\n        });\n        this.addressFormGroup\n            .get('streetNumber')\n            .valueChanges\n            .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))\n            .subscribe(streetNumber => {\n            !this.value ? this.value = { streetNumber } : this.value.streetNumber = streetNumber;\n            this.value.displayAddress = this.parseDisplayAddress();\n            this.propagateChange(this.value);\n        });\n        this.addressFormGroup\n            .get('postalCode')\n            .valueChanges\n            .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))\n            .subscribe(postalCode => {\n            !this.value ? this.value = { postalCode } : this.value.postalCode = postalCode;\n            this.value.displayAddress = this.parseDisplayAddress();\n            this.propagateChange(this.value);\n        });\n        this.addressFormGroup\n            .get('vicinity')\n            .valueChanges\n            .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))\n            .subscribe(vicinity => {\n            !this.value ? this.value = { vicinity } : this.value.vicinity = vicinity;\n            this.value.displayAddress = this.parseDisplayAddress();\n            this.propagateChange(this.value);\n        });\n        this.addressFormGroup\n            .get('locality')\n            .valueChanges\n            .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))\n            .subscribe(locality => {\n            !this.value ? this.value = { locality } : this.value.locality = locality;\n            this.value.displayAddress = this.parseDisplayAddress();\n            this.propagateChange(this.value);\n        });\n    }\n    parseDisplayAddress() {\n        return `${this.value?.streetName ? this.value?.streetName : ''} ${this.value?.streetNumber ? this.value?.streetNumber : ''}${this.value?.postalCode || this.value?.locality?.long ? ', ' : ''}${this.value?.postalCode ? this.value?.postalCode : ''} ${this.value?.locality?.long ? this.value?.locality?.long : ''}`;\n    }\n    syncAutoComplete($event) {\n        if (this.germanAddress) {\n            this.addressFormGroup.reset();\n        }\n        const germanAddress = parseGermanAddress($event);\n        this.germanAddress = germanAddress;\n        if (germanAddress.vicinity) {\n            this.addressFormGroup.get('vicinity').patchValue(germanAddress.vicinity, { emitEvent: false, onlySelf: true });\n        }\n        if (germanAddress.streetName) {\n            this.addressFormGroup.get('streetName').patchValue(germanAddress.streetName, { emitEvent: false, onlySelf: true });\n        }\n        if (germanAddress.streetNumber) {\n            this.addressFormGroup.get('streetNumber').patchValue(germanAddress.streetNumber.toString(), { emitEvent: false, onlySelf: true });\n        }\n        if (germanAddress.postalCode) {\n            this.addressFormGroup.get('postalCode').patchValue(germanAddress.postalCode, { emitEvent: false, onlySelf: true });\n        }\n        if (germanAddress.locality && germanAddress.locality.long) {\n            this.addressFormGroup.get('locality.long').patchValue(germanAddress.locality.long, { emitEvent: false, onlySelf: true });\n        }\n        this.value = germanAddress;\n        this.onGermanAddressMapped.emit(germanAddress);\n    }\n    writeValue(obj) {\n        let shouldRecreateFG = false;\n        if (obj) {\n            if (!this.value && this.firstInit) {\n                shouldRecreateFG = true;\n            }\n            this.value = obj;\n            if (shouldRecreateFG) {\n                this.createAddressFormGroup();\n                this.firstInit = false;\n            }\n        }\n    }\n    registerOnChange(fn) {\n        this.propagateChange = fn;\n    }\n    registerOnTouched(fn) {\n    }\n    setDisabledState(isDisabled) {\n    }\n}\nMatSearchGoogleMapsAutocompleteComponent.ɵfac = function MatSearchGoogleMapsAutocompleteComponent_Factory(t) { return new (t || MatSearchGoogleMapsAutocompleteComponent)(i0.ɵɵdirectiveInject(i1$1.UntypedFormBuilder)); };\nMatSearchGoogleMapsAutocompleteComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: MatSearchGoogleMapsAutocompleteComponent, selectors: [[\"mat-search-google-maps-autocomplete\"]], inputs: { searchBarAppearance: \"searchBarAppearance\", appearance: \"appearance\", searchAddressLabel: \"searchAddressLabel\", streetNameLabel: \"streetNameLabel\", streetNumberLabel: \"streetNumberLabel\", postalCodeLabel: \"postalCodeLabel\", localityLabel: \"localityLabel\", vicinityLabel: \"vicinityLabel\", showVicinity: \"showVicinity\", country: \"country\", placeIdOnly: \"placeIdOnly\", strictBounds: \"strictBounds\", types: \"types\", type: \"type\", readonly: \"readonly\", disableSearch: \"disableSearch\", _value: \"_value\", value: \"value\" }, outputs: { onGermanAddressMapped: \"onGermanAddressMapped\" }, features: [i0.ɵɵProvidersFeature([\n            {\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: forwardRef(() => MatSearchGoogleMapsAutocompleteComponent),\n                multi: true\n            }\n        ])], decls: 25, vars: 31, consts: [[\"fxLayout\", \"column\"], [\"fxFlex\", \"100\", 4, \"ngIf\"], [\"fxFlex\", \"\", \"fxLayoutGap\", \"10px\", 3, \"formGroup\"], [\"fxLayout\", \"row\", \"fxLayoutGap\", \"10px\"], [\"fxFlex\", \"80\", 3, \"appearance\"], [\"formControlName\", \"streetName\", \"matInput\", \"\", \"required\", \"\", 3, \"readonly\"], [\"fxFlex\", \"20\", 3, \"appearance\"], [\"formControlName\", \"streetNumber\", \"matInput\", \"\", \"required\", \"\", 3, \"readonly\"], [\"formControlName\", \"postalCode\", \"type\", \"number\", \"matInput\", \"\", \"required\", \"\", 3, \"readonly\"], [\"fxFlex\", \"auto\", 3, \"appearance\", 4, \"ngIf\"], [\"formGroupName\", \"locality\", \"fxFlex\", \"auto\"], [\"fxFlex\", \"auto\", 3, \"appearance\"], [\"formControlName\", \"long\", \"matInput\", \"\", \"required\", \"\", 3, \"readonly\"], [\"color\", \"primary\", \"matSuffix\", \"\"], [\"fxFlex\", \"100\"], [\"matGoogleMapsAutocomplete\", \"\", \"matInput\", \"\", \"required\", \"\", 3, \"country\", \"placeIdOnly\", \"strictBounds\", \"types\", \"type\", \"onAutocompleteSelected\"], [\"matInput\", \"\", \"formControlName\", \"vicinity\", 3, \"readonly\"]], template: function MatSearchGoogleMapsAutocompleteComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, MatSearchGoogleMapsAutocompleteComponent_div_1_Template, 7, 11, \"div\", 1);\n        i0.ɵɵelementStart(2, \"form\", 2)(3, \"div\", 3)(4, \"mat-form-field\", 4)(5, \"mat-label\");\n        i0.ɵɵtext(6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"mat-form-field\", 6)(9, \"mat-label\");\n        i0.ɵɵtext(10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"input\", 7);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(12, \"div\", 3)(13, \"mat-form-field\", 6)(14, \"mat-label\");\n        i0.ɵɵtext(15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(16, \"input\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(17, MatSearchGoogleMapsAutocompleteComponent_mat_form_field_17_Template, 4, 7, \"mat-form-field\", 9);\n        i0.ɵɵelementStart(18, \"div\", 10)(19, \"mat-form-field\", 11)(20, \"mat-label\");\n        i0.ɵɵtext(21);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(22, \"input\", 12);\n        i0.ɵɵelementStart(23, \"mat-icon\", 13);\n        i0.ɵɵtext(24, \"add_location\");\n        i0.ɵɵelementEnd()()()()()();\n    } if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.disableSearch);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.addressFormGroup);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"appearance\", ctx.appearance)(\"@animate\", i0.ɵɵpureFunction1(20, _c1, i0.ɵɵpureFunction0(19, _c0)));\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.streetNameLabel);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"readonly\", ctx.readonly);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.appearance)(\"@animate\", i0.ɵɵpureFunction1(23, _c1, i0.ɵɵpureFunction0(22, _c0)));\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.streetNumberLabel);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"readonly\", ctx.readonly);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"appearance\", ctx.appearance)(\"@animate\", i0.ɵɵpureFunction1(26, _c1, i0.ɵɵpureFunction0(25, _c0)));\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.postalCodeLabel);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"readonly\", ctx.readonly);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showVicinity);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"appearance\", ctx.appearance)(\"@animate\", i0.ɵɵpureFunction1(29, _c1, i0.ɵɵpureFunction0(28, _c0)));\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.localityLabel);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"readonly\", ctx.readonly);\n    } }, dependencies: [i2.NgIf, i1$1.ɵNgNoValidate, i1$1.DefaultValueAccessor, i1$1.NumberValueAccessor, i1$1.NgControlStatus, i1$1.NgControlStatusGroup, i1$1.RequiredValidator, i1$1.FormGroupDirective, i1$1.FormControlName, i1$1.FormGroupName, i3.DefaultLayoutDirective, i3.DefaultLayoutGapDirective, i3.DefaultFlexDirective, i4.MatFormField, i4.MatLabel, i4.MatSuffix, i5.MatInput, i6.MatIcon, MatGoogleMapsAutocompleteDirective], data: { animation: InputAnimations } });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSearchGoogleMapsAutocompleteComponent, [{\n        type: Component,\n        args: [{ selector: 'mat-search-google-maps-autocomplete', animations: InputAnimations, providers: [\n                    {\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: forwardRef(() => MatSearchGoogleMapsAutocompleteComponent),\n                        multi: true\n                    }\n                ], template: \"<div fxLayout=\\\"column\\\">\\n  <div *ngIf=\\\"!disableSearch\\\" fxFlex=\\\"100\\\">\\n    <!--search address-->\\n    <mat-form-field fxFlex=\\\"auto\\\" [appearance]=\\\"searchBarAppearance\\\" [@animate]=\\\"{ value: '*', params: { y: '100%' } }\\\">\\n      <mat-label>{{searchAddressLabel}}</mat-label>\\n      <input\\n        (onAutocompleteSelected)=\\\"syncAutoComplete($event)\\\"\\n        [country]=\\\"country\\\"\\n        [placeIdOnly]=\\\"placeIdOnly\\\"\\n        [strictBounds]=\\\"strictBounds\\\"\\n        [types]=\\\"types\\\"\\n        [type]=\\\"type\\\"\\n        matGoogleMapsAutocomplete\\n        matInput\\n        required\\n      />\\n      <mat-icon color=\\\"primary\\\" matSuffix>search</mat-icon>\\n      <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\\n    </mat-form-field>\\n  </div>\\n\\n  <form [formGroup]=\\\"addressFormGroup\\\" fxFlex fxLayoutGap=\\\"10px\\\">\\n    <div fxLayout=\\\"row\\\" fxLayoutGap=\\\"10px\\\">\\n      <mat-form-field fxFlex=\\\"80\\\"\\n                      [appearance]=\\\"appearance\\\"\\n                      [@animate]=\\\"{ value: '*', params: { y: '100%' } }\\\">\\n        <mat-label>{{streetNameLabel}}</mat-label>\\n        <input\\n          [readonly]=\\\"readonly\\\"\\n          formControlName=\\\"streetName\\\"\\n          matInput\\n          required\\n        />\\n        <!--        <mat-icon color=\\\"primary\\\" matSuffix>add_location</mat-icon>-->\\n        <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\\n      </mat-form-field>\\n      <mat-form-field fxFlex=\\\"20\\\" [appearance]=\\\"appearance\\\" [@animate]=\\\"{ value: '*', params: { y: '100%' } }\\\">\\n        <mat-label>{{streetNumberLabel}}</mat-label>\\n        <input\\n          [readonly]=\\\"readonly\\\"\\n          formControlName=\\\"streetNumber\\\"\\n          matInput\\n          required\\n        />\\n        <!--        <mat-icon color=\\\"primary\\\" matSuffix>add_location</mat-icon>-->\\n        <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\\n      </mat-form-field>\\n    </div>\\n    <div fxLayout=\\\"row\\\" fxLayoutGap=\\\"10px\\\">\\n      <mat-form-field fxFlex=\\\"20\\\" [appearance]=\\\"appearance\\\" [@animate]=\\\"{ value: '*', params: { y: '100%' } }\\\">\\n        <mat-label>{{postalCodeLabel}}</mat-label>\\n        <input\\n          [readonly]=\\\"readonly\\\"\\n          formControlName=\\\"postalCode\\\"\\n          type=\\\"number\\\"\\n          matInput\\n          required\\n        />\\n        <!--        <mat-icon color=\\\"primary\\\" matSuffix>add_location</mat-icon>-->\\n        <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\\n      </mat-form-field>\\n      <mat-form-field *ngIf=\\\"showVicinity\\\" fxFlex=\\\"auto\\\"\\n                      [appearance]=\\\"appearance\\\"\\n                      [@animate]=\\\"{ value: '*', params: { y: '100%' } }\\\">\\n        <mat-label>{{vicinityLabel}}</mat-label>\\n        <input\\n          [readonly]=\\\"readonly\\\"\\n          matInput\\n          formControlName=\\\"vicinity\\\"\\n        />\\n      </mat-form-field>\\n      <div formGroupName=\\\"locality\\\" fxFlex=\\\"auto\\\">\\n        <mat-form-field fxFlex=\\\"auto\\\" [appearance]=\\\"appearance\\\" [@animate]=\\\"{ value: '*', params: { y: '100%' } }\\\">\\n          <mat-label>{{localityLabel}}</mat-label>\\n          <input\\n            [readonly]=\\\"readonly\\\"\\n            formControlName=\\\"long\\\"\\n            matInput\\n            required\\n          />\\n          <mat-icon color=\\\"primary\\\" matSuffix>add_location</mat-icon>\\n          <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\\n        </mat-form-field>\\n      </div>\\n    </div>\\n  </form>\\n</div>\\n\" }]\n    }], function () { return [{ type: i1$1.UntypedFormBuilder }]; }, { searchBarAppearance: [{\n            type: Input\n        }], appearance: [{\n            type: Input\n        }], searchAddressLabel: [{\n            type: Input\n        }], streetNameLabel: [{\n            type: Input\n        }], streetNumberLabel: [{\n            type: Input\n        }], postalCodeLabel: [{\n            type: Input\n        }], localityLabel: [{\n            type: Input\n        }], vicinityLabel: [{\n            type: Input\n        }], showVicinity: [{\n            type: Input\n        }], country: [{\n            type: Input\n        }], placeIdOnly: [{\n            type: Input\n        }], strictBounds: [{\n            type: Input\n        }], types: [{\n            type: Input\n        }], type: [{\n            type: Input\n        }], readonly: [{\n            type: Input\n        }], disableSearch: [{\n            type: Input\n        }], _value: [{\n            type: Input\n        }], onGermanAddressMapped: [{\n            type: Output\n        }], value: [{\n            type: Input\n        }] }); })();\n\nclass MatGoogleMapsAutocompleteModule {\n}\nMatGoogleMapsAutocompleteModule.ɵfac = function MatGoogleMapsAutocompleteModule_Factory(t) { return new (t || MatGoogleMapsAutocompleteModule)(); };\nMatGoogleMapsAutocompleteModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: MatGoogleMapsAutocompleteModule });\nMatGoogleMapsAutocompleteModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [\n    // {\n    //   provide: NG_VALUE_ACCESSOR,\n    //   useExisting: forwardRef(() => MatGoogleMapsAutocompleteDirective),\n    //   multi: true\n    // }\n    ], imports: [CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        FlexLayoutModule,\n        MatInputModule,\n        MatIconModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGoogleMapsAutocompleteModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    FormsModule,\n                    ReactiveFormsModule,\n                    FlexLayoutModule,\n                    MatInputModule,\n                    MatIconModule\n                ],\n                exports: [\n                    MatGoogleMapsAutocompleteComponent,\n                    MatGoogleMapsAutocompleteDirective,\n                    MatValidateAddressDirective,\n                    MatSearchGoogleMapsAutocompleteComponent\n                ],\n                declarations: [\n                    MatGoogleMapsAutocompleteComponent,\n                    MatGoogleMapsAutocompleteDirective,\n                    MatValidateAddressDirective,\n                    MatSearchGoogleMapsAutocompleteComponent\n                ],\n                providers: [\n                // {\n                //   provide: NG_VALUE_ACCESSOR,\n                //   useExisting: forwardRef(() => MatGoogleMapsAutocompleteDirective),\n                //   multi: true\n                // }\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(MatGoogleMapsAutocompleteModule, { declarations: [MatGoogleMapsAutocompleteComponent,\n        MatGoogleMapsAutocompleteDirective,\n        MatValidateAddressDirective,\n        MatSearchGoogleMapsAutocompleteComponent], imports: [CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        FlexLayoutModule,\n        MatInputModule,\n        MatIconModule], exports: [MatGoogleMapsAutocompleteComponent,\n        MatGoogleMapsAutocompleteDirective,\n        MatValidateAddressDirective,\n        MatSearchGoogleMapsAutocompleteComponent] }); })();\n\n/*\n * Public API Surface of google-maps-autocomplete\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Appearance, MatGoogleMapsAutocompleteComponent, MatGoogleMapsAutocompleteDirective, MatGoogleMapsAutocompleteModule, MatSearchGoogleMapsAutocompleteComponent, MatValidateAddressDirective, parseGermanAddress };\n//# sourceMappingURL=angular-material-extensions-google-maps-autocomplete.mjs.map\n","map":{"version":3,"file":"angular-material-extensions-google-maps-autocomplete.mjs","sources":["../../../../projects/angular-material-extensions/google-maps-autocomplete/src/lib/helpers/parser.ts","../../../../projects/angular-material-extensions/google-maps-autocomplete/src/lib/directives/address-validator/mat-address-validator.directive.ts","../../../../projects/angular-material-extensions/google-maps-autocomplete/src/lib/component/mat-google-maps-autocomplete.component.html","../../../../projects/angular-material-extensions/google-maps-autocomplete/src/lib/component/mat-google-maps-autocomplete.component.ts","../../../../projects/angular-material-extensions/google-maps-autocomplete/src/lib/animations/index.ts","../../../../projects/angular-material-extensions/google-maps-autocomplete/src/lib/directives/mat-google-maps-autocomplete.directive.ts","../../../../projects/angular-material-extensions/google-maps-autocomplete/src/lib/component/mat-search-google-maps-autocomplete/mat-search-google-maps-autocomplete.component.html","../../../../projects/angular-material-extensions/google-maps-autocomplete/src/lib/component/mat-search-google-maps-autocomplete/mat-search-google-maps-autocomplete.component.ts","../../../../projects/angular-material-extensions/google-maps-autocomplete/src/lib/mat-google-maps-autocomplete.module.ts","../../../../projects/angular-material-extensions/google-maps-autocomplete/src/public-api.ts","../../../../projects/angular-material-extensions/google-maps-autocomplete/src/angular-material-extensions-google-maps-autocomplete.ts"],"sourcesContent":["import PlaceResult = google.maps.places.PlaceResult;\nimport {GermanAddress} from '../interfaces';\n\nexport function parseGermanAddress(placeResult: PlaceResult): GermanAddress {\n  const germanAddress: GermanAddress = {\n    gmID: placeResult.id,\n    icon: placeResult.icon,\n    url: placeResult.url,\n    placeID: placeResult.place_id,\n    displayAddress: placeResult.formatted_address,\n    name: placeResult.name,\n    vicinity: placeResult.vicinity,\n    locality: {},\n    state: {},\n    country: {},\n    geoLocation: {latitude: -1, longitude: -1},\n  };\n\n  if (placeResult.geometry && placeResult.geometry.location) {\n    germanAddress.geoLocation.latitude = placeResult.geometry.location.lat();\n    germanAddress.geoLocation.longitude = placeResult.geometry.location.lng();\n  }\n\n  if (placeResult.address_components && placeResult.address_components.length > 0) {\n    placeResult.address_components.forEach(value => {\n      if (value.types.indexOf('street_number') > -1) {\n        germanAddress.streetNumber = value.short_name;\n      }\n      if (value.types.indexOf('route') > -1) {\n        germanAddress.streetName = value.long_name;\n      }\n      if (value.types.indexOf('postal_code') > -1) {\n        germanAddress.postalCode = Number(value.short_name);\n      }\n      if (value.types.indexOf('sublocality') > -1) {\n        germanAddress.sublocality = value.long_name;\n      }\n      if (value.types.indexOf('locality') > -1) {\n        germanAddress.locality.long = value.long_name;\n        germanAddress.locality.short = value.short_name;\n      }\n      if (value.types.indexOf('administrative_area_level_1') > -1) {\n        germanAddress.state.long = value.long_name;\n        germanAddress.state.short = value.short_name;\n      }\n      if (value.types.indexOf('country') > -1) {\n        germanAddress.country.long = value.long_name;\n        germanAddress.country.short = value.short_name;\n      }\n      if (value.types.indexOf('administrative_area_level_3') > -1) {\n        germanAddress.locality.short = value.short_name;\n      }\n    });\n  }\n  return germanAddress;\n}\n","import {Directive, EventEmitter, forwardRef} from '@angular/core';\nimport {AbstractControl, NG_VALIDATORS, ValidationErrors, Validator, ValidatorFn} from '@angular/forms';\nimport PlaceResult = google.maps.places.PlaceResult;\n\n// https://github.com/angular/angular/blob/master/packages/forms/src/directives/validators.ts\n\n@Directive({\n  selector: '[mat-address-validate][formControlName],[MatValidateAddress][formControl],[MatValidateAddress][ngModel]',\n  providers: [\n    {provide: NG_VALIDATORS, useExisting: forwardRef(() => MatValidateAddressDirective), multi: true}\n  ]\n})\nexport class MatValidateAddressDirective implements Validator {\n\n  public subscription: any;\n\n  private _address: PlaceResult;\n\n\n  constructor() {\n  }\n\n  public validate(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | any => {\n      return this.address ? null : {\n        validateAddress: {\n          valid: false\n        }\n      };\n    }\n  }\n\n  public subscribe(eventEmitter: EventEmitter<any>) {\n    this.subscription = eventEmitter.subscribe((address: PlaceResult) => {\n      this.address = address;\n    });\n  }\n\n  public unsubscribe() {\n    this.subscription.unsubscribe();\n  }\n\n  get address() {\n    return this._address;\n  }\n\n  set address(value) {\n    this._address = value;\n  }\n}\n","<mat-form-field class=\"full-width\" [appearance]=\"appearance\">\n  <mat-label>{{addressLabelText}}</mat-label>\n  <input matInput\n         [(ngModel)]=\"address\"\n         (change)=\"onQuery($event)\"\n         placeholder=\"{{placeholderText}}\"\n         class=\"form-control\"\n         #search\n         MatValidateAddress\n         required>\n  <mat-error *ngIf=\"addressSearchControl.hasError('required')\">\n    {{requiredErrorText}}\n  </mat-error>\n  <mat-error *ngIf=\"addressSearchControl.hasError('validateAddress')\">\n    {{invalidErrorText}}\n  </mat-error>\n</mat-form-field>\n","import {Component, ElementRef, EventEmitter, forwardRef, Input, NgZone, OnInit, Output, ViewChild} from '@angular/core';\nimport {ControlValueAccessor, UntypedFormControl, NG_VALUE_ACCESSOR, Validators} from '@angular/forms';\nimport {MapsAPILoader} from '@agm/core';\nimport {MatValidateAddressDirective} from '../directives/address-validator/mat-address-validator.directive';\nimport {Location} from '../interfaces/location.interface';\nimport {GermanAddress} from '../interfaces';\nimport PlaceResult = google.maps.places.PlaceResult;\nimport AutocompleteOptions = google.maps.places.AutocompleteOptions;\n\nexport enum Appearance {\n  STANDARD = 'standard',\n  FILL = 'fill',\n  OUTLINE = 'outline',\n  LEGACY = 'legacy',\n}\n\n@Component({\n  selector: 'mat-google-maps-autocomplete',\n  exportAs: 'matGoogleMapsAutocomplete',\n  templateUrl: './mat-google-maps-autocomplete.component.html',\n  styleUrls: ['./mat-google-maps-autocomplete.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MatGoogleMapsAutocompleteComponent),\n      multi: true\n    }\n  ]\n})\nexport class MatGoogleMapsAutocompleteComponent implements OnInit, ControlValueAccessor {\n\n  @ViewChild('search')\n  public searchElementRef: ElementRef;\n\n  @Input()\n  addressLabelText = 'Address';\n\n  @Input()\n  placeholderText = 'Please enter the address';\n\n  @Input()\n  requiredErrorText = 'The address is required';\n\n  @Input()\n  invalidErrorText = 'The address is not valid';\n\n  @Input()\n  appearance: string | Appearance = Appearance.STANDARD;\n\n  @Input()\n  value: PlaceResult;\n\n  @Input()\n  address: PlaceResult | string;\n\n  @Input()\n  country: string | string[];\n\n  @Input()\n  placeIdOnly?: boolean;\n\n  @Input()\n  strictBounds?: boolean;\n\n  @Input()\n  types?: string[];\n  // types: string[] = ['address'];\n\n  @Input()\n  type?: string;\n\n  @Input()\n  autoCompleteOptions: AutocompleteOptions = {};\n\n  @Output()\n  onChange: EventEmitter<PlaceResult | string | null> = new EventEmitter<PlaceResult | string | null>();\n\n  @Output()\n  onAutocompleteSelected: EventEmitter<PlaceResult> = new EventEmitter<PlaceResult>();\n\n  @Output()\n  onGermanAddressMapped: EventEmitter<GermanAddress> = new EventEmitter<GermanAddress>();\n\n  @Output()\n  onLocationSelected: EventEmitter<Location> = new EventEmitter<Location>();\n\n\n  private onNewPlaceResult: EventEmitter<any> = new EventEmitter();\n  private addressValidator: MatValidateAddressDirective = new MatValidateAddressDirective();\n\n  public addressSearchControl: UntypedFormControl = new UntypedFormControl({value: null}, Validators.compose([\n    Validators.required,\n    this.addressValidator.validate()])\n  );\n\n  propagateChange = (_: any) => {\n  };\n\n  constructor(private mapsAPILoader: MapsAPILoader,\n              private ngZone: NgZone) {\n  }\n\n  ngOnInit(): void {\n    this.addressValidator.subscribe(this.onNewPlaceResult);\n\n    const options: AutocompleteOptions = {\n      // types: ['address'],\n      // componentRestrictions: {country: this.country},\n      placeIdOnly: this.placeIdOnly,\n      strictBounds: this.strictBounds,\n      // types: this.types,\n      type: this.type\n    };\n\n    // tslint:disable-next-line:no-unused-expression\n    this.country ? options.componentRestrictions = {country: this.country} : null;\n    // tslint:disable-next-line:no-unused-expression\n    this.country ? options.types = this.types : null;\n\n    this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);\n    this.initGoogleMapsAutocomplete();\n  }\n\n  public initGoogleMapsAutocomplete() {\n    this.mapsAPILoader\n      .load()\n      .then(() => {\n        const autocomplete = new google.maps.places.Autocomplete(this.searchElementRef.nativeElement, this.autoCompleteOptions);\n        autocomplete.addListener('place_changed', () => {\n          this.ngZone.run(() => {\n            // get the place result\n            const place: PlaceResult = autocomplete.getPlace();\n\n            const germanAddress: GermanAddress = {\n              gmID: place.id,\n              icon: place.icon,\n              url: place.url,\n              placeID: place.place_id,\n              displayAddress: place.formatted_address,\n              name: place.name,\n              vicinity: place.vicinity,\n              locality: {},\n              state: {},\n              country: {},\n              geoLocation: {latitude: -1, longitude: -1},\n            };\n\n            if (place.geometry && place.geometry.location) {\n              germanAddress.geoLocation.latitude = place.geometry.location.lat();\n              germanAddress.geoLocation.longitude = place.geometry.location.lng();\n            }\n\n            if(place.address_components) {\n              place.address_components.forEach(value => {\n                if (value.types.indexOf('street_number') > -1) {\n                  germanAddress.streetNumber = value.short_name;\n                }\n                if (value.types.indexOf('route') > -1) {\n                  germanAddress.streetName = value.long_name;\n                }\n                if (value.types.indexOf('postal_code') > -1) {\n                  germanAddress.postalCode = Number(value.short_name);\n                }\n                if (value.types.indexOf('sublocality') > -1) {\n                  germanAddress.sublocality = value.long_name;\n                }\n                if (value.types.indexOf('locality') > -1) {\n                  germanAddress.locality.long = value.long_name;\n                  germanAddress.locality.short = value.short_name;\n                }\n                if (value.types.indexOf('administrative_area_level_1') > -1) {\n                  germanAddress.state.long = value.long_name;\n                  germanAddress.state.short = value.short_name;\n                }\n                if (value.types.indexOf('country') > -1) {\n                  germanAddress.country.long = value.long_name;\n                  germanAddress.country.short = value.short_name;\n                }\n                if (value.types.indexOf('administrative_area_level_3') > -1) {\n                  germanAddress.locality.short = value.short_name;\n                }\n              });\n            }\n\n            this.onGermanAddressMapped.emit(germanAddress);\n\n            if (!place.place_id || place.geometry === undefined || place.geometry === null) {\n              // place result is not valid\n              return;\n            } else {\n              // show dialog to select a address from the input\n              // emit failed event\n              this.value = place;\n              this.propagateChange(this.value)\n            }\n            this.address = place.formatted_address;\n            this.onAutocompleteSelected.emit(place);\n            // console.log('onAutocompleteSelected -> ', place);\n            this.onLocationSelected.emit(\n              {\n                latitude: place.geometry.location.lat(),\n                longitude: place.geometry.location.lng()\n              });\n          });\n        });\n      })\n      .catch((err) => console.log(err));\n  }\n\n  public onQuery(event: any) {\n    // console.log('onChange()', event);\n    this.onChange.emit(this.address);\n  }\n\n  private resetAddress() {\n    this.address = null;\n    this.addressSearchControl.updateValueAndValidity();\n  }\n\n  writeValue(obj: any): void {\n    if (obj) {\n      this.value = obj;\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    throw new Error('Method not implemented.');\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    throw new Error('Method not implemented.');\n  }\n\n}\n","import {animate, animateChild, animation, query, stagger, state, style, transition, trigger, useAnimation} from '@angular/animations';\n\nconst customAnimation = animation(\n  [\n    style({\n      opacity: '{{opacity}}',\n      transform: 'scale({{scale}}) translate3d({{x}}, {{y}}, {{z}})'\n    }),\n    animate('{{duration}} {{delay}} cubic-bezier(0.0, 0.0, 0.2, 1)', style('*'))\n  ],\n  {\n    params: {\n      duration: '200ms',\n      delay: '0ms',\n      opacity: '0',\n      scale: '1',\n      x: '0',\n      y: '0',\n      z: '0'\n    }\n  }\n);\n\nexport const InputAnimations = [\n  trigger('animate', [transition('void => *', [useAnimation(customAnimation)])]),\n\n  trigger('animateStagger', [\n    state('50', style('*')),\n    state('100', style('*')),\n    state('200', style('*')),\n\n    transition('void => 50', query('@*', [stagger('50ms', [animateChild()])], {optional: true})),\n    transition('void => 100', query('@*', [stagger('100ms', [animateChild()])], {optional: true})),\n    transition('void => 200', query('@*', [stagger('200ms', [animateChild()])], {optional: true}))\n  ]),\n];\n","import {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  HostListener,\n  Inject,\n  Input,\n  NgZone,\n  OnInit,\n  Output,\n  PLATFORM_ID\n} from '@angular/core';\nimport {ControlValueAccessor, FormControl, NG_VALIDATORS, Validators} from '@angular/forms';\nimport {MapsAPILoader} from '@agm/core';\nimport {GermanAddress, Location} from '../interfaces';\nimport {isPlatformBrowser} from '@angular/common';\nimport PlaceResult = google.maps.places.PlaceResult;\nimport AutocompleteOptions = google.maps.places.AutocompleteOptions;\n\n@Directive({\n  selector: '[matGoogleMapsAutocomplete]',\n  exportAs: 'matGoogleMapsAutocomplete',\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => MatGoogleMapsAutocompleteDirective),\n      multi: true\n    }\n  ]\n})\nexport class MatGoogleMapsAutocompleteDirective implements OnInit, ControlValueAccessor {\n\n  @Input()\n  address: PlaceResult | string;\n\n  @Input()\n  country: string | string[];\n\n  @Input()\n  placeIdOnly?: boolean;\n\n  @Input()\n  strictBounds?: boolean;\n\n  @Input()\n  types?: string[];\n\n  @Input()\n  type?: string;\n\n  @Input()\n  autoCompleteOptions: AutocompleteOptions = {};\n\n  @Output()\n  onChange: EventEmitter<PlaceResult | string | null> = new EventEmitter<PlaceResult | string | null>();\n\n  @Output()\n  onAutocompleteSelected: EventEmitter<PlaceResult> = new EventEmitter<PlaceResult>();\n\n  @Output()\n  onGermanAddressMapped: EventEmitter<GermanAddress> = new EventEmitter<GermanAddress>();\n\n  @Output()\n  onLocationSelected: EventEmitter<Location> = new EventEmitter<Location>();\n\n  disabled: boolean\n\n  _value: string;\n\n  get value(): string {\n    return this._value;\n  }\n\n  @Input()\n  set value(value: string) {\n    this._value = value;\n    this.propagateChange(this.value);\n    this.cf.markForCheck();\n  }\n\n  private onNewPlaceResult: EventEmitter<any> = new EventEmitter();\n\n  propagateChange = (_: any) => {\n  };\n\n  constructor(@Inject(PLATFORM_ID) public platformId: string,\n              public elemRef: ElementRef,\n              public mapsAPILoader: MapsAPILoader,\n              private cf: ChangeDetectorRef,\n              private ngZone: NgZone) {\n  }\n\n  ngOnInit(): void {\n    console.log('validator', this)\n    if (isPlatformBrowser(this.platformId)) {\n      const options: AutocompleteOptions = {\n        // types: ['address'],\n        // componentRestrictions: {country: this.country},\n        placeIdOnly: this.placeIdOnly,\n        strictBounds: this.strictBounds,\n        // types: this.types,\n        type: this.type\n      };\n\n      // tslint:disable-next-line:no-unused-expression\n      this.country ? options.componentRestrictions = {country: this.country} : null;\n      // tslint:disable-next-line:no-unused-expression\n      this.country ? options.types = this.types : null;\n\n      this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);\n      this.initGoogleMapsAutocomplete();\n    }\n  }\n\n  validate(fc: FormControl) {\n    return fc.hasValidator(Validators.required) ? !!fc?.value : true;\n  }\n\n  @HostListener('change')\n  onChangeInputValue(): void {\n    const value = (this.elemRef.nativeElement as HTMLInputElement)?.value;\n    this.value = value;\n  }\n\n  public initGoogleMapsAutocomplete() {\n    this.mapsAPILoader\n      .load()\n      .then(() => {\n        const autocomplete = new google.maps.places.Autocomplete(this.elemRef.nativeElement, this.autoCompleteOptions);\n        autocomplete.addListener('place_changed', () => {\n          this.ngZone.run(() => {\n            // get the place result\n            const place: PlaceResult = autocomplete.getPlace();\n\n            const germanAddress: GermanAddress = {\n              gmID: place.id,\n              icon: place.icon,\n              url: place.url,\n              placeID: place.place_id,\n              displayAddress: place.formatted_address,\n              name: place.name,\n              vicinity: place.vicinity,\n              locality: {},\n              state: {},\n              country: {},\n              geoLocation: {latitude: -1, longitude: -1},\n            };\n\n            if (place.geometry && place.geometry.location) {\n              germanAddress.geoLocation.latitude = place.geometry.location.lat();\n              germanAddress.geoLocation.longitude = place.geometry.location.lng();\n            }\n\n            place.address_components.forEach(value => {\n              if (value.types.indexOf('street_number') > -1) {\n                germanAddress.streetNumber = value.short_name;\n              }\n              if (value.types.indexOf('route') > -1) {\n                germanAddress.streetName = value.long_name;\n              }\n              if (value.types.indexOf('postal_code') > -1) {\n                germanAddress.postalCode = Number(value.short_name);\n              }\n              if (value.types.indexOf('sublocality') > -1) {\n                germanAddress.sublocality = value.long_name;\n              }\n              if (value.types.indexOf('locality') > -1) {\n                germanAddress.locality.long = value.long_name;\n                germanAddress.locality.short = value.short_name;\n              }\n              if (value.types.indexOf('administrative_area_level_1') > -1) {\n                germanAddress.state.long = value.long_name;\n                germanAddress.state.short = value.short_name;\n              }\n              if (value.types.indexOf('country') > -1) {\n                germanAddress.country.long = value.long_name;\n                germanAddress.country.short = value.short_name;\n              }\n              if (value.types.indexOf('administrative_area_level_3') > -1) {\n                germanAddress.locality.short = value.short_name;\n              }\n            });\n\n            this.onGermanAddressMapped.emit(germanAddress);\n\n            this.value = place.formatted_address;\n            this.address = place.formatted_address;\n            this.onAutocompleteSelected.emit(place);\n            this.onLocationSelected.emit(\n              {\n                latitude: place.geometry.location.lat(),\n                longitude: place.geometry.location.lng()\n              });\n          });\n        });\n      })\n      .catch((err) => console.log(err));\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  writeValue(obj: any): void {\n    if (obj) {\n      this.value = obj;\n    }\n  }\n\n}\n","<div fxLayout=\"column\">\n  <div *ngIf=\"!disableSearch\" fxFlex=\"100\">\n    <!--search address-->\n    <mat-form-field fxFlex=\"auto\" [appearance]=\"searchBarAppearance\" [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n      <mat-label>{{searchAddressLabel}}</mat-label>\n      <input\n        (onAutocompleteSelected)=\"syncAutoComplete($event)\"\n        [country]=\"country\"\n        [placeIdOnly]=\"placeIdOnly\"\n        [strictBounds]=\"strictBounds\"\n        [types]=\"types\"\n        [type]=\"type\"\n        matGoogleMapsAutocomplete\n        matInput\n        required\n      />\n      <mat-icon color=\"primary\" matSuffix>search</mat-icon>\n      <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n    </mat-form-field>\n  </div>\n\n  <form [formGroup]=\"addressFormGroup\" fxFlex fxLayoutGap=\"10px\">\n    <div fxLayout=\"row\" fxLayoutGap=\"10px\">\n      <mat-form-field fxFlex=\"80\"\n                      [appearance]=\"appearance\"\n                      [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n        <mat-label>{{streetNameLabel}}</mat-label>\n        <input\n          [readonly]=\"readonly\"\n          formControlName=\"streetName\"\n          matInput\n          required\n        />\n        <!--        <mat-icon color=\"primary\" matSuffix>add_location</mat-icon>-->\n        <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n      </mat-form-field>\n      <mat-form-field fxFlex=\"20\" [appearance]=\"appearance\" [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n        <mat-label>{{streetNumberLabel}}</mat-label>\n        <input\n          [readonly]=\"readonly\"\n          formControlName=\"streetNumber\"\n          matInput\n          required\n        />\n        <!--        <mat-icon color=\"primary\" matSuffix>add_location</mat-icon>-->\n        <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n      </mat-form-field>\n    </div>\n    <div fxLayout=\"row\" fxLayoutGap=\"10px\">\n      <mat-form-field fxFlex=\"20\" [appearance]=\"appearance\" [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n        <mat-label>{{postalCodeLabel}}</mat-label>\n        <input\n          [readonly]=\"readonly\"\n          formControlName=\"postalCode\"\n          type=\"number\"\n          matInput\n          required\n        />\n        <!--        <mat-icon color=\"primary\" matSuffix>add_location</mat-icon>-->\n        <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n      </mat-form-field>\n      <mat-form-field *ngIf=\"showVicinity\" fxFlex=\"auto\"\n                      [appearance]=\"appearance\"\n                      [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n        <mat-label>{{vicinityLabel}}</mat-label>\n        <input\n          [readonly]=\"readonly\"\n          matInput\n          formControlName=\"vicinity\"\n        />\n      </mat-form-field>\n      <div formGroupName=\"locality\" fxFlex=\"auto\">\n        <mat-form-field fxFlex=\"auto\" [appearance]=\"appearance\" [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n          <mat-label>{{localityLabel}}</mat-label>\n          <input\n            [readonly]=\"readonly\"\n            formControlName=\"long\"\n            matInput\n            required\n          />\n          <mat-icon color=\"primary\" matSuffix>add_location</mat-icon>\n          <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n        </mat-form-field>\n      </div>\n    </div>\n  </form>\n</div>\n","import {Component, EventEmitter, forwardRef, Input, OnInit, Output} from '@angular/core';\nimport {ControlValueAccessor, UntypedFormBuilder, UntypedFormGroup, NG_VALUE_ACCESSOR, Validators} from '@angular/forms';\n\nimport {parseGermanAddress} from '../../helpers/parser';\nimport {GermanAddress} from '../../interfaces';\nimport {Appearance} from '../mat-google-maps-autocomplete.component';\nimport {InputAnimations} from '../../animations';\nimport {debounceTime, distinctUntilChanged, takeUntil} from 'rxjs/operators';\nimport {Subject} from 'rxjs';\n\n@Component({\n  selector: 'mat-search-google-maps-autocomplete',\n  templateUrl: './mat-search-google-maps-autocomplete.component.html',\n  styleUrls: ['./mat-search-google-maps-autocomplete.component.scss'],\n  animations: InputAnimations,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MatSearchGoogleMapsAutocompleteComponent),\n      multi: true\n    }\n  ]\n})\nexport class MatSearchGoogleMapsAutocompleteComponent implements OnInit, ControlValueAccessor {\n\n  constructor(private formBuilder: UntypedFormBuilder) {\n    // Set the private defaults\n    this._unsubscribeAll = new Subject();\n  }\n\n  @Input()\n  searchBarAppearance: string | Appearance;\n\n  @Input()\n  appearance: string | Appearance = Appearance.STANDARD;\n\n  @Input()\n  searchAddressLabel = 'Search Address';\n\n  @Input()\n  streetNameLabel = 'Street';\n\n  @Input()\n  streetNumberLabel = 'Nr.';\n\n  @Input()\n  postalCodeLabel = 'PLZ';\n\n  @Input()\n  localityLabel = 'Locality';\n\n  @Input()\n  vicinityLabel = 'Vicinity';\n\n  @Input()\n  showVicinity: boolean;\n\n  @Input()\n  country: string | string[];\n\n  @Input()\n  placeIdOnly?: boolean;\n\n  @Input()\n  strictBounds?: boolean;\n\n  @Input()\n  types?: string[];\n  // types: string[] = ['address'];\n\n  @Input()\n  type?: string;\n\n  @Input()\n  readonly: boolean;\n\n  @Input()\n  disableSearch: boolean;\n\n  @Input() private _value: GermanAddress;\n\n  @Output()\n  onGermanAddressMapped: EventEmitter<GermanAddress> = new EventEmitter<GermanAddress>();\n\n  germanAddress: GermanAddress;\n  addressFormGroup: UntypedFormGroup;\n\n  firstInit = true;\n\n  // Private\n  private _unsubscribeAll: Subject<any>;\n\n  propagateChange = (_: any) => {\n  };\n\n\n  get value(): GermanAddress {\n    return this._value;\n  }\n\n  @Input()\n  set value(value: GermanAddress) {\n    this._value = value;\n    this.propagateChange(this.value);\n    // console.log('setValue', this._value);\n  }\n\n  ngOnInit() {\n    this.createAddressFormGroup();\n    this.enableCustomInput();\n  }\n\n  createAddressFormGroup(): void {\n    this.addressFormGroup = this.formBuilder.group({\n      streetName: [this.value && this.value.streetName ? this.value.streetName : null, Validators.required],\n      streetNumber: [this.value && this.value.streetNumber ? this.value.streetNumber : null, Validators.required],\n      postalCode: [this.value && this.value.postalCode ? this.value.postalCode : null, Validators.required],\n      vicinity: [this.value && this.value.vicinity ? this.value.vicinity : null],\n      locality: this.formBuilder.group({\n        long: [this.value && this.value.locality && this.value.locality.long ? this.value.locality.long : null, Validators.required],\n      }),\n    });\n  }\n\n  enableCustomInput() {\n    this.addressFormGroup\n      .get('streetName')\n      .valueChanges\n      .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))\n      .subscribe(streetName => {\n        !this.value ? this.value = {streetName} : this.value.streetName = streetName;\n        this.value.displayAddress = this.parseDisplayAddress();\n        this.propagateChange(this.value);\n      });\n    this.addressFormGroup\n      .get('streetNumber')\n      .valueChanges\n      .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))\n      .subscribe(streetNumber => {\n        !this.value ? this.value = {streetNumber} : this.value.streetNumber = streetNumber;\n        this.value.displayAddress = this.parseDisplayAddress();\n        this.propagateChange(this.value);\n      });\n    this.addressFormGroup\n      .get('postalCode')\n      .valueChanges\n      .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))\n      .subscribe(postalCode => {\n        !this.value ? this.value = {postalCode} : this.value.postalCode = postalCode;\n        this.value.displayAddress = this.parseDisplayAddress();\n        this.propagateChange(this.value);\n      });\n    this.addressFormGroup\n      .get('vicinity')\n      .valueChanges\n      .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))\n      .subscribe(vicinity => {\n        !this.value ? this.value = {vicinity} : this.value.vicinity = vicinity;\n        this.value.displayAddress = this.parseDisplayAddress();\n        this.propagateChange(this.value);\n      });\n    this.addressFormGroup\n      .get('locality')\n      .valueChanges\n      .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))\n      .subscribe(locality => {\n        !this.value ? this.value = {locality} : this.value.locality = locality;\n        this.value.displayAddress = this.parseDisplayAddress();\n        this.propagateChange(this.value);\n      });\n  }\n\n  parseDisplayAddress() {\n    return `${this.value?.streetName ? this.value?.streetName : ''} ${this.value?.streetNumber ? this.value?.streetNumber : ''}${this.value?.postalCode || this.value?.locality?.long ? ', ' : ''}${this.value?.postalCode ? this.value?.postalCode : ''} ${this.value?.locality?.long ? this.value?.locality?.long : ''}`\n  }\n\n  syncAutoComplete($event: google.maps.places.PlaceResult) {\n    if (this.germanAddress) {\n      this.addressFormGroup.reset();\n    }\n    const germanAddress: GermanAddress = parseGermanAddress($event);\n    this.germanAddress = germanAddress;\n    if (germanAddress.vicinity) {\n      this.addressFormGroup.get('vicinity').patchValue(germanAddress.vicinity, {emitEvent: false, onlySelf: true});\n    }\n    if (germanAddress.streetName) {\n      this.addressFormGroup.get('streetName').patchValue(germanAddress.streetName, {emitEvent: false, onlySelf: true});\n    }\n    if (germanAddress.streetNumber) {\n      this.addressFormGroup.get('streetNumber').patchValue(germanAddress.streetNumber.toString(), {emitEvent: false, onlySelf: true});\n    }\n    if (germanAddress.postalCode) {\n      this.addressFormGroup.get('postalCode').patchValue(germanAddress.postalCode, {emitEvent: false, onlySelf: true});\n    }\n    if (germanAddress.locality && germanAddress.locality.long) {\n      this.addressFormGroup.get('locality.long').patchValue(germanAddress.locality.long, {emitEvent: false, onlySelf: true});\n    }\n\n    this.value = germanAddress;\n    this.onGermanAddressMapped.emit(germanAddress);\n  }\n\n  writeValue(obj: any): void {\n    let shouldRecreateFG = false;\n    if (obj) {\n      if (!this.value && this.firstInit) {\n        shouldRecreateFG = true;\n      }\n      this.value = obj;\n      if (shouldRecreateFG) {\n        this.createAddressFormGroup();\n        this.firstInit = false;\n      }\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n  }\n\n}\n","import {CommonModule} from '@angular/common';\nimport {forwardRef, NgModule} from '@angular/core';\nimport {FlexLayoutModule} from '@angular/flex-layout';\nimport {FormsModule, NG_VALUE_ACCESSOR, ReactiveFormsModule} from '@angular/forms';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatGoogleMapsAutocompleteDirective} from './directives/mat-google-maps-autocomplete.directive';\nimport {MatValidateAddressDirective} from './directives/address-validator/mat-address-validator.directive';\n// tslint:disable-next-line:max-line-length\nimport {MatGoogleMapsAutocompleteComponent, MatSearchGoogleMapsAutocompleteComponent} from './component';\n\n\n@NgModule({\n  imports:\n    [\n      CommonModule,\n      FormsModule,\n      ReactiveFormsModule,\n      FlexLayoutModule,\n      MatInputModule,\n      MatIconModule\n    ],\n  exports: [\n    MatGoogleMapsAutocompleteComponent,\n    MatGoogleMapsAutocompleteDirective,\n    MatValidateAddressDirective,\n    MatSearchGoogleMapsAutocompleteComponent\n  ],\n  declarations: [\n    MatGoogleMapsAutocompleteComponent,\n    MatGoogleMapsAutocompleteDirective,\n    MatValidateAddressDirective,\n    MatSearchGoogleMapsAutocompleteComponent\n  ],\n  providers: [\n    // {\n    //   provide: NG_VALUE_ACCESSOR,\n    //   useExisting: forwardRef(() => MatGoogleMapsAutocompleteDirective),\n    //   multi: true\n    // }\n  ]\n})\nexport class MatGoogleMapsAutocompleteModule {\n}\n","/*\n * Public API Surface of google-maps-autocomplete\n */\n\nexport * from './lib/helpers/parser';\nexport * from './lib/interfaces';\nexport * from './lib/component';\nexport * from './lib/directives/mat-google-maps-autocomplete.directive';\nexport * from './lib/directives/address-validator/mat-address-validator.directive';\nexport * from './lib/mat-google-maps-autocomplete.module';\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1"],"mappings":"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"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { forwardRef, Directive, EventEmitter, Component, ViewChild, Input, Output, PLATFORM_ID, Inject, HostListener, NgModule } from '@angular/core';\nimport * as i1$1 from '@angular/forms';\nimport { NG_VALIDATORS, UntypedFormControl, Validators, NG_VALUE_ACCESSOR, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport * as i1 from '@agm/core';\nimport * as i2 from '@angular/common';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\nimport * as i4 from '@angular/material/form-field';\nimport * as i5 from '@angular/material/input';\nimport { MatInputModule } from '@angular/material/input';\nimport { animation, style, animate, trigger, transition, useAnimation, state, query, stagger, animateChild } from '@angular/animations';\nimport { distinctUntilChanged, debounceTime, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport * as i3 from '@angular/flex-layout/flex';\nimport * as i6 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\nfunction parseGermanAddress(placeResult) {\n    const germanAddress = {\n        gmID: placeResult.id,\n        icon: placeResult.icon,\n        url: placeResult.url,\n        placeID: placeResult.place_id,\n        displayAddress: placeResult.formatted_address,\n        name: placeResult.name,\n        vicinity: placeResult.vicinity,\n        locality: {},\n        state: {},\n        country: {},\n        geoLocation: { latitude: -1, longitude: -1 },\n    };\n    if (placeResult.geometry && placeResult.geometry.location) {\n        germanAddress.geoLocation.latitude = placeResult.geometry.location.lat();\n        germanAddress.geoLocation.longitude = placeResult.geometry.location.lng();\n    }\n    if (placeResult.address_components && placeResult.address_components.length > 0) {\n        placeResult.address_components.forEach(value => {\n            if (value.types.indexOf('street_number') > -1) {\n                germanAddress.streetNumber = value.short_name;\n            }\n            if (value.types.indexOf('route') > -1) {\n                germanAddress.streetName = value.long_name;\n            }\n            if (value.types.indexOf('postal_code') > -1) {\n                germanAddress.postalCode = Number(value.short_name);\n            }\n            if (value.types.indexOf('sublocality') > -1) {\n                germanAddress.sublocality = value.long_name;\n            }\n            if (value.types.indexOf('locality') > -1) {\n                germanAddress.locality.long = value.long_name;\n                germanAddress.locality.short = value.short_name;\n            }\n            if (value.types.indexOf('administrative_area_level_1') > -1) {\n                germanAddress.state.long = value.long_name;\n                germanAddress.state.short = value.short_name;\n            }\n            if (value.types.indexOf('country') > -1) {\n                germanAddress.country.long = value.long_name;\n                germanAddress.country.short = value.short_name;\n            }\n            if (value.types.indexOf('administrative_area_level_3') > -1) {\n                germanAddress.locality.short = value.short_name;\n            }\n        });\n    }\n    return germanAddress;\n}\n\n// https://github.com/angular/angular/blob/master/packages/forms/src/directives/validators.ts\nclass MatValidateAddressDirective {\n    constructor() {\n    }\n    validate() {\n        return (control) => {\n            return this.address ? null : {\n                validateAddress: {\n                    valid: false\n                }\n            };\n        };\n    }\n    subscribe(eventEmitter) {\n        this.subscription = eventEmitter.subscribe((address) => {\n            this.address = address;\n        });\n    }\n    unsubscribe() {\n        this.subscription.unsubscribe();\n    }\n    get address() {\n        return this._address;\n    }\n    set address(value) {\n        this._address = value;\n    }\n}\nMatValidateAddressDirective.ɵfac = function MatValidateAddressDirective_Factory(t) { return new (t || MatValidateAddressDirective)(); };\nMatValidateAddressDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: MatValidateAddressDirective, selectors: [[\"\", \"mat-address-validate\", \"\", \"formControlName\", \"\"], [\"\", \"MatValidateAddress\", \"\", \"formControl\", \"\"], [\"\", \"MatValidateAddress\", \"\", \"ngModel\", \"\"]], features: [i0.ɵɵProvidersFeature([\n            { provide: NG_VALIDATORS, useExisting: forwardRef(() => MatValidateAddressDirective), multi: true }\n        ])] });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatValidateAddressDirective, [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-address-validate][formControlName],[MatValidateAddress][formControl],[MatValidateAddress][ngModel]',\n                    providers: [\n                        { provide: NG_VALIDATORS, useExisting: forwardRef(() => MatValidateAddressDirective), multi: true }\n                    ]\n                }]\n        }], function () { return []; }, null);\n})();\n\nconst _c0$1 = [\"search\"];\nfunction MatGoogleMapsAutocompleteComponent_mat_error_5_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-error\");\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n        const ctx_r1 = i0.ɵɵnextContext();\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx_r1.requiredErrorText, \" \");\n    }\n}\nfunction MatGoogleMapsAutocompleteComponent_mat_error_6_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-error\");\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n        const ctx_r2 = i0.ɵɵnextContext();\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx_r2.invalidErrorText, \" \");\n    }\n}\nvar Appearance;\n(function (Appearance) {\n    Appearance[\"STANDARD\"] = \"standard\";\n    Appearance[\"FILL\"] = \"fill\";\n    Appearance[\"OUTLINE\"] = \"outline\";\n    Appearance[\"LEGACY\"] = \"legacy\";\n})(Appearance || (Appearance = {}));\nclass MatGoogleMapsAutocompleteComponent {\n    constructor(mapsAPILoader, ngZone) {\n        this.mapsAPILoader = mapsAPILoader;\n        this.ngZone = ngZone;\n        this.addressLabelText = 'Address';\n        this.placeholderText = 'Please enter the address';\n        this.requiredErrorText = 'The address is required';\n        this.invalidErrorText = 'The address is not valid';\n        this.appearance = Appearance.STANDARD;\n        this.autoCompleteOptions = {};\n        this.onChange = new EventEmitter();\n        this.onAutocompleteSelected = new EventEmitter();\n        this.onGermanAddressMapped = new EventEmitter();\n        this.onLocationSelected = new EventEmitter();\n        this.onNewPlaceResult = new EventEmitter();\n        this.addressValidator = new MatValidateAddressDirective();\n        this.addressSearchControl = new UntypedFormControl({ value: null }, Validators.compose([\n            Validators.required,\n            this.addressValidator.validate()\n        ]));\n        this.propagateChange = (_) => {\n        };\n    }\n    ngOnInit() {\n        this.addressValidator.subscribe(this.onNewPlaceResult);\n        const options = {\n            // types: ['address'],\n            // componentRestrictions: {country: this.country},\n            placeIdOnly: this.placeIdOnly,\n            strictBounds: this.strictBounds,\n            // types: this.types,\n            type: this.type\n        };\n        // tslint:disable-next-line:no-unused-expression\n        this.country ? options.componentRestrictions = { country: this.country } : null;\n        // tslint:disable-next-line:no-unused-expression\n        this.country ? options.types = this.types : null;\n        this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);\n        this.initGoogleMapsAutocomplete();\n    }\n    initGoogleMapsAutocomplete() {\n        this.mapsAPILoader\n            .load()\n            .then(() => {\n            const autocomplete = new google.maps.places.Autocomplete(this.searchElementRef.nativeElement, this.autoCompleteOptions);\n            autocomplete.addListener('place_changed', () => {\n                this.ngZone.run(() => {\n                    // get the place result\n                    const place = autocomplete.getPlace();\n                    const germanAddress = {\n                        gmID: place.id,\n                        icon: place.icon,\n                        url: place.url,\n                        placeID: place.place_id,\n                        displayAddress: place.formatted_address,\n                        name: place.name,\n                        vicinity: place.vicinity,\n                        locality: {},\n                        state: {},\n                        country: {},\n                        geoLocation: { latitude: -1, longitude: -1 },\n                    };\n                    if (place.geometry && place.geometry.location) {\n                        germanAddress.geoLocation.latitude = place.geometry.location.lat();\n                        germanAddress.geoLocation.longitude = place.geometry.location.lng();\n                    }\n                    if (place.address_components) {\n                        place.address_components.forEach(value => {\n                            if (value.types.indexOf('street_number') > -1) {\n                                germanAddress.streetNumber = value.short_name;\n                            }\n                            if (value.types.indexOf('route') > -1) {\n                                germanAddress.streetName = value.long_name;\n                            }\n                            if (value.types.indexOf('postal_code') > -1) {\n                                germanAddress.postalCode = Number(value.short_name);\n                            }\n                            if (value.types.indexOf('sublocality') > -1) {\n                                germanAddress.sublocality = value.long_name;\n                            }\n                            if (value.types.indexOf('locality') > -1) {\n                                germanAddress.locality.long = value.long_name;\n                                germanAddress.locality.short = value.short_name;\n                            }\n                            if (value.types.indexOf('administrative_area_level_1') > -1) {\n                                germanAddress.state.long = value.long_name;\n                                germanAddress.state.short = value.short_name;\n                            }\n                            if (value.types.indexOf('country') > -1) {\n                                germanAddress.country.long = value.long_name;\n                                germanAddress.country.short = value.short_name;\n                            }\n                            if (value.types.indexOf('administrative_area_level_3') > -1) {\n                                germanAddress.locality.short = value.short_name;\n                            }\n                        });\n                    }\n                    this.onGermanAddressMapped.emit(germanAddress);\n                    if (!place.place_id || place.geometry === undefined || place.geometry === null) {\n                        // place result is not valid\n                        return;\n                    }\n                    else {\n                        // show dialog to select a address from the input\n                        // emit failed event\n                        this.value = place;\n                        this.propagateChange(this.value);\n                    }\n                    this.address = place.formatted_address;\n                    this.onAutocompleteSelected.emit(place);\n                    // console.log('onAutocompleteSelected -> ', place);\n                    this.onLocationSelected.emit({\n                        latitude: place.geometry.location.lat(),\n                        longitude: place.geometry.location.lng()\n                    });\n                });\n            });\n        })\n            .catch((err) => console.log(err));\n    }\n    onQuery(event) {\n        // console.log('onChange()', event);\n        this.onChange.emit(this.address);\n    }\n    resetAddress() {\n        this.address = null;\n        this.addressSearchControl.updateValueAndValidity();\n    }\n    writeValue(obj) {\n        if (obj) {\n            this.value = obj;\n        }\n    }\n    registerOnChange(fn) {\n        this.propagateChange = fn;\n    }\n    registerOnTouched(fn) {\n        throw new Error('Method not implemented.');\n    }\n    setDisabledState(isDisabled) {\n        throw new Error('Method not implemented.');\n    }\n}\nMatGoogleMapsAutocompleteComponent.ɵfac = function MatGoogleMapsAutocompleteComponent_Factory(t) { return new (t || MatGoogleMapsAutocompleteComponent)(i0.ɵɵdirectiveInject(i1.MapsAPILoader), i0.ɵɵdirectiveInject(i0.NgZone)); };\nMatGoogleMapsAutocompleteComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: MatGoogleMapsAutocompleteComponent, selectors: [[\"mat-google-maps-autocomplete\"]], viewQuery: function MatGoogleMapsAutocompleteComponent_Query(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵviewQuery(_c0$1, 5);\n        }\n        if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.searchElementRef = _t.first);\n        }\n    }, inputs: { addressLabelText: \"addressLabelText\", placeholderText: \"placeholderText\", requiredErrorText: \"requiredErrorText\", invalidErrorText: \"invalidErrorText\", appearance: \"appearance\", value: \"value\", address: \"address\", country: \"country\", placeIdOnly: \"placeIdOnly\", strictBounds: \"strictBounds\", types: \"types\", type: \"type\", autoCompleteOptions: \"autoCompleteOptions\" }, outputs: { onChange: \"onChange\", onAutocompleteSelected: \"onAutocompleteSelected\", onGermanAddressMapped: \"onGermanAddressMapped\", onLocationSelected: \"onLocationSelected\" }, exportAs: [\"matGoogleMapsAutocomplete\"], features: [i0.ɵɵProvidersFeature([\n            {\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: forwardRef(() => MatGoogleMapsAutocompleteComponent),\n                multi: true\n            }\n        ])], decls: 7, vars: 6, consts: [[1, \"full-width\", 3, \"appearance\"], [\"matInput\", \"\", \"MatValidateAddress\", \"\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"placeholder\", \"ngModelChange\", \"change\"], [\"search\", \"\"], [4, \"ngIf\"]], template: function MatGoogleMapsAutocompleteComponent_Template(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵelementStart(0, \"mat-form-field\", 0)(1, \"mat-label\");\n            i0.ɵɵtext(2);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(3, \"input\", 1, 2);\n            i0.ɵɵlistener(\"ngModelChange\", function MatGoogleMapsAutocompleteComponent_Template_input_ngModelChange_3_listener($event) { return ctx.address = $event; })(\"change\", function MatGoogleMapsAutocompleteComponent_Template_input_change_3_listener($event) { return ctx.onQuery($event); });\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(5, MatGoogleMapsAutocompleteComponent_mat_error_5_Template, 2, 1, \"mat-error\", 3);\n            i0.ɵɵtemplate(6, MatGoogleMapsAutocompleteComponent_mat_error_6_Template, 2, 1, \"mat-error\", 3);\n            i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n            i0.ɵɵproperty(\"appearance\", ctx.appearance);\n            i0.ɵɵadvance(2);\n            i0.ɵɵtextInterpolate(ctx.addressLabelText);\n            i0.ɵɵadvance(1);\n            i0.ɵɵpropertyInterpolate(\"placeholder\", ctx.placeholderText);\n            i0.ɵɵproperty(\"ngModel\", ctx.address);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngIf\", ctx.addressSearchControl.hasError(\"required\"));\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.addressSearchControl.hasError(\"validateAddress\"));\n        }\n    }, dependencies: [i2.NgIf, i1$1.DefaultValueAccessor, i1$1.NgControlStatus, i1$1.RequiredValidator, i1$1.NgModel, i4.MatError, i4.MatFormField, i4.MatLabel, i5.MatInput, MatValidateAddressDirective], styles: [\".full-width[_ngcontent-%COMP%]{width:100%}\"] });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGoogleMapsAutocompleteComponent, [{\n            type: Component,\n            args: [{ selector: 'mat-google-maps-autocomplete', exportAs: 'matGoogleMapsAutocomplete', providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => MatGoogleMapsAutocompleteComponent),\n                            multi: true\n                        }\n                    ], template: \"<mat-form-field class=\\\"full-width\\\" [appearance]=\\\"appearance\\\">\\n  <mat-label>{{addressLabelText}}</mat-label>\\n  <input matInput\\n         [(ngModel)]=\\\"address\\\"\\n         (change)=\\\"onQuery($event)\\\"\\n         placeholder=\\\"{{placeholderText}}\\\"\\n         class=\\\"form-control\\\"\\n         #search\\n         MatValidateAddress\\n         required>\\n  <mat-error *ngIf=\\\"addressSearchControl.hasError('required')\\\">\\n    {{requiredErrorText}}\\n  </mat-error>\\n  <mat-error *ngIf=\\\"addressSearchControl.hasError('validateAddress')\\\">\\n    {{invalidErrorText}}\\n  </mat-error>\\n</mat-form-field>\\n\", styles: [\".full-width{width:100%}\\n\"] }]\n        }], function () { return [{ type: i1.MapsAPILoader }, { type: i0.NgZone }]; }, { searchElementRef: [{\n                type: ViewChild,\n                args: ['search']\n            }], addressLabelText: [{\n                type: Input\n            }], placeholderText: [{\n                type: Input\n            }], requiredErrorText: [{\n                type: Input\n            }], invalidErrorText: [{\n                type: Input\n            }], appearance: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], address: [{\n                type: Input\n            }], country: [{\n                type: Input\n            }], placeIdOnly: [{\n                type: Input\n            }], strictBounds: [{\n                type: Input\n            }], types: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], autoCompleteOptions: [{\n                type: Input\n            }], onChange: [{\n                type: Output\n            }], onAutocompleteSelected: [{\n                type: Output\n            }], onGermanAddressMapped: [{\n                type: Output\n            }], onLocationSelected: [{\n                type: Output\n            }] });\n})();\n\nconst customAnimation = animation([\n    style({\n        opacity: '{{opacity}}',\n        transform: 'scale({{scale}}) translate3d({{x}}, {{y}}, {{z}})'\n    }),\n    animate('{{duration}} {{delay}} cubic-bezier(0.0, 0.0, 0.2, 1)', style('*'))\n], {\n    params: {\n        duration: '200ms',\n        delay: '0ms',\n        opacity: '0',\n        scale: '1',\n        x: '0',\n        y: '0',\n        z: '0'\n    }\n});\nconst InputAnimations = [\n    trigger('animate', [transition('void => *', [useAnimation(customAnimation)])]),\n    trigger('animateStagger', [\n        state('50', style('*')),\n        state('100', style('*')),\n        state('200', style('*')),\n        transition('void => 50', query('@*', [stagger('50ms', [animateChild()])], { optional: true })),\n        transition('void => 100', query('@*', [stagger('100ms', [animateChild()])], { optional: true })),\n        transition('void => 200', query('@*', [stagger('200ms', [animateChild()])], { optional: true }))\n    ]),\n];\n\nclass MatGoogleMapsAutocompleteDirective {\n    constructor(platformId, elemRef, mapsAPILoader, cf, ngZone) {\n        this.platformId = platformId;\n        this.elemRef = elemRef;\n        this.mapsAPILoader = mapsAPILoader;\n        this.cf = cf;\n        this.ngZone = ngZone;\n        this.autoCompleteOptions = {};\n        this.onChange = new EventEmitter();\n        this.onAutocompleteSelected = new EventEmitter();\n        this.onGermanAddressMapped = new EventEmitter();\n        this.onLocationSelected = new EventEmitter();\n        this.onNewPlaceResult = new EventEmitter();\n        this.propagateChange = (_) => {\n        };\n    }\n    get value() {\n        return this._value;\n    }\n    set value(value) {\n        this._value = value;\n        this.propagateChange(this.value);\n        this.cf.markForCheck();\n    }\n    ngOnInit() {\n        console.log('validator', this);\n        if (isPlatformBrowser(this.platformId)) {\n            const options = {\n                // types: ['address'],\n                // componentRestrictions: {country: this.country},\n                placeIdOnly: this.placeIdOnly,\n                strictBounds: this.strictBounds,\n                // types: this.types,\n                type: this.type\n            };\n            // tslint:disable-next-line:no-unused-expression\n            this.country ? options.componentRestrictions = { country: this.country } : null;\n            // tslint:disable-next-line:no-unused-expression\n            this.country ? options.types = this.types : null;\n            this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);\n            this.initGoogleMapsAutocomplete();\n        }\n    }\n    validate(fc) {\n        return fc.hasValidator(Validators.required) ? !!(fc === null || fc === void 0 ? void 0 : fc.value) : true;\n    }\n    onChangeInputValue() {\n        var _a;\n        const value = (_a = this.elemRef.nativeElement) === null || _a === void 0 ? void 0 : _a.value;\n        this.value = value;\n    }\n    initGoogleMapsAutocomplete() {\n        this.mapsAPILoader\n            .load()\n            .then(() => {\n            const autocomplete = new google.maps.places.Autocomplete(this.elemRef.nativeElement, this.autoCompleteOptions);\n            autocomplete.addListener('place_changed', () => {\n                this.ngZone.run(() => {\n                    // get the place result\n                    const place = autocomplete.getPlace();\n                    const germanAddress = {\n                        gmID: place.id,\n                        icon: place.icon,\n                        url: place.url,\n                        placeID: place.place_id,\n                        displayAddress: place.formatted_address,\n                        name: place.name,\n                        vicinity: place.vicinity,\n                        locality: {},\n                        state: {},\n                        country: {},\n                        geoLocation: { latitude: -1, longitude: -1 },\n                    };\n                    if (place.geometry && place.geometry.location) {\n                        germanAddress.geoLocation.latitude = place.geometry.location.lat();\n                        germanAddress.geoLocation.longitude = place.geometry.location.lng();\n                    }\n                    place.address_components.forEach(value => {\n                        if (value.types.indexOf('street_number') > -1) {\n                            germanAddress.streetNumber = value.short_name;\n                        }\n                        if (value.types.indexOf('route') > -1) {\n                            germanAddress.streetName = value.long_name;\n                        }\n                        if (value.types.indexOf('postal_code') > -1) {\n                            germanAddress.postalCode = Number(value.short_name);\n                        }\n                        if (value.types.indexOf('sublocality') > -1) {\n                            germanAddress.sublocality = value.long_name;\n                        }\n                        if (value.types.indexOf('locality') > -1) {\n                            germanAddress.locality.long = value.long_name;\n                            germanAddress.locality.short = value.short_name;\n                        }\n                        if (value.types.indexOf('administrative_area_level_1') > -1) {\n                            germanAddress.state.long = value.long_name;\n                            germanAddress.state.short = value.short_name;\n                        }\n                        if (value.types.indexOf('country') > -1) {\n                            germanAddress.country.long = value.long_name;\n                            germanAddress.country.short = value.short_name;\n                        }\n                        if (value.types.indexOf('administrative_area_level_3') > -1) {\n                            germanAddress.locality.short = value.short_name;\n                        }\n                    });\n                    this.onGermanAddressMapped.emit(germanAddress);\n                    this.value = place.formatted_address;\n                    this.address = place.formatted_address;\n                    this.onAutocompleteSelected.emit(place);\n                    this.onLocationSelected.emit({\n                        latitude: place.geometry.location.lat(),\n                        longitude: place.geometry.location.lng()\n                    });\n                });\n            });\n        })\n            .catch((err) => console.log(err));\n    }\n    registerOnChange(fn) {\n        this.propagateChange = fn;\n    }\n    registerOnTouched(fn) {\n    }\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    writeValue(obj) {\n        if (obj) {\n            this.value = obj;\n        }\n    }\n}\nMatGoogleMapsAutocompleteDirective.ɵfac = function MatGoogleMapsAutocompleteDirective_Factory(t) { return new (t || MatGoogleMapsAutocompleteDirective)(i0.ɵɵdirectiveInject(PLATFORM_ID), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.MapsAPILoader), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone)); };\nMatGoogleMapsAutocompleteDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: MatGoogleMapsAutocompleteDirective, selectors: [[\"\", \"matGoogleMapsAutocomplete\", \"\"]], hostBindings: function MatGoogleMapsAutocompleteDirective_HostBindings(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵlistener(\"change\", function MatGoogleMapsAutocompleteDirective_change_HostBindingHandler() { return ctx.onChangeInputValue(); });\n        }\n    }, inputs: { address: \"address\", country: \"country\", placeIdOnly: \"placeIdOnly\", strictBounds: \"strictBounds\", types: \"types\", type: \"type\", autoCompleteOptions: \"autoCompleteOptions\", value: \"value\" }, outputs: { onChange: \"onChange\", onAutocompleteSelected: \"onAutocompleteSelected\", onGermanAddressMapped: \"onGermanAddressMapped\", onLocationSelected: \"onLocationSelected\" }, exportAs: [\"matGoogleMapsAutocomplete\"], features: [i0.ɵɵProvidersFeature([\n            {\n                provide: NG_VALIDATORS,\n                useExisting: forwardRef(() => MatGoogleMapsAutocompleteDirective),\n                multi: true\n            }\n        ])] });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGoogleMapsAutocompleteDirective, [{\n            type: Directive,\n            args: [{\n                    selector: '[matGoogleMapsAutocomplete]',\n                    exportAs: 'matGoogleMapsAutocomplete',\n                    providers: [\n                        {\n                            provide: NG_VALIDATORS,\n                            useExisting: forwardRef(() => MatGoogleMapsAutocompleteDirective),\n                            multi: true\n                        }\n                    ]\n                }]\n        }], function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }, { type: i0.ElementRef }, { type: i1.MapsAPILoader }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }];\n    }, { address: [{\n                type: Input\n            }], country: [{\n                type: Input\n            }], placeIdOnly: [{\n                type: Input\n            }], strictBounds: [{\n                type: Input\n            }], types: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], autoCompleteOptions: [{\n                type: Input\n            }], onChange: [{\n                type: Output\n            }], onAutocompleteSelected: [{\n                type: Output\n            }], onGermanAddressMapped: [{\n                type: Output\n            }], onLocationSelected: [{\n                type: Output\n            }], value: [{\n                type: Input\n            }], onChangeInputValue: [{\n                type: HostListener,\n                args: ['change']\n            }] });\n})();\n\nconst _c0 = function () { return { y: \"100%\" }; };\nconst _c1 = function (a1) { return { value: \"*\", params: a1 }; };\nfunction MatSearchGoogleMapsAutocompleteComponent_div_1_Template(rf, ctx) {\n    if (rf & 1) {\n        const _r3 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"div\", 14)(1, \"mat-form-field\", 11)(2, \"mat-label\");\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"input\", 15);\n        i0.ɵɵlistener(\"onAutocompleteSelected\", function MatSearchGoogleMapsAutocompleteComponent_div_1_Template_input_onAutocompleteSelected_4_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r2 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r2.syncAutoComplete($event)); });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"mat-icon\", 13);\n        i0.ɵɵtext(6, \"search\");\n        i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n        const ctx_r0 = i0.ɵɵnextContext();\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx_r0.searchBarAppearance)(\"@animate\", i0.ɵɵpureFunction1(9, _c1, i0.ɵɵpureFunction0(8, _c0)));\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx_r0.searchAddressLabel);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"country\", ctx_r0.country)(\"placeIdOnly\", ctx_r0.placeIdOnly)(\"strictBounds\", ctx_r0.strictBounds)(\"types\", ctx_r0.types)(\"type\", ctx_r0.type);\n    }\n}\nfunction MatSearchGoogleMapsAutocompleteComponent_mat_form_field_17_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-form-field\", 11)(1, \"mat-label\");\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(3, \"input\", 16);\n        i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n        const ctx_r1 = i0.ɵɵnextContext();\n        i0.ɵɵproperty(\"appearance\", ctx_r1.appearance)(\"@animate\", i0.ɵɵpureFunction1(5, _c1, i0.ɵɵpureFunction0(4, _c0)));\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx_r1.vicinityLabel);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"readonly\", ctx_r1.readonly);\n    }\n}\nclass MatSearchGoogleMapsAutocompleteComponent {\n    constructor(formBuilder) {\n        this.formBuilder = formBuilder;\n        this.appearance = Appearance.STANDARD;\n        this.searchAddressLabel = 'Search Address';\n        this.streetNameLabel = 'Street';\n        this.streetNumberLabel = 'Nr.';\n        this.postalCodeLabel = 'PLZ';\n        this.localityLabel = 'Locality';\n        this.vicinityLabel = 'Vicinity';\n        this.onGermanAddressMapped = new EventEmitter();\n        this.firstInit = true;\n        this.propagateChange = (_) => {\n        };\n        // Set the private defaults\n        this._unsubscribeAll = new Subject();\n    }\n    get value() {\n        return this._value;\n    }\n    set value(value) {\n        this._value = value;\n        this.propagateChange(this.value);\n        // console.log('setValue', this._value);\n    }\n    ngOnInit() {\n        this.createAddressFormGroup();\n        this.enableCustomInput();\n    }\n    createAddressFormGroup() {\n        this.addressFormGroup = this.formBuilder.group({\n            streetName: [this.value && this.value.streetName ? this.value.streetName : null, Validators.required],\n            streetNumber: [this.value && this.value.streetNumber ? this.value.streetNumber : null, Validators.required],\n            postalCode: [this.value && this.value.postalCode ? this.value.postalCode : null, Validators.required],\n            vicinity: [this.value && this.value.vicinity ? this.value.vicinity : null],\n            locality: this.formBuilder.group({\n                long: [this.value && this.value.locality && this.value.locality.long ? this.value.locality.long : null, Validators.required],\n            }),\n        });\n    }\n    enableCustomInput() {\n        this.addressFormGroup\n            .get('streetName')\n            .valueChanges\n            .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))\n            .subscribe(streetName => {\n            !this.value ? this.value = { streetName } : this.value.streetName = streetName;\n            this.value.displayAddress = this.parseDisplayAddress();\n            this.propagateChange(this.value);\n        });\n        this.addressFormGroup\n            .get('streetNumber')\n            .valueChanges\n            .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))\n            .subscribe(streetNumber => {\n            !this.value ? this.value = { streetNumber } : this.value.streetNumber = streetNumber;\n            this.value.displayAddress = this.parseDisplayAddress();\n            this.propagateChange(this.value);\n        });\n        this.addressFormGroup\n            .get('postalCode')\n            .valueChanges\n            .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))\n            .subscribe(postalCode => {\n            !this.value ? this.value = { postalCode } : this.value.postalCode = postalCode;\n            this.value.displayAddress = this.parseDisplayAddress();\n            this.propagateChange(this.value);\n        });\n        this.addressFormGroup\n            .get('vicinity')\n            .valueChanges\n            .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))\n            .subscribe(vicinity => {\n            !this.value ? this.value = { vicinity } : this.value.vicinity = vicinity;\n            this.value.displayAddress = this.parseDisplayAddress();\n            this.propagateChange(this.value);\n        });\n        this.addressFormGroup\n            .get('locality')\n            .valueChanges\n            .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))\n            .subscribe(locality => {\n            !this.value ? this.value = { locality } : this.value.locality = locality;\n            this.value.displayAddress = this.parseDisplayAddress();\n            this.propagateChange(this.value);\n        });\n    }\n    parseDisplayAddress() {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n        return `${((_a = this.value) === null || _a === void 0 ? void 0 : _a.streetName) ? (_b = this.value) === null || _b === void 0 ? void 0 : _b.streetName : ''} ${((_c = this.value) === null || _c === void 0 ? void 0 : _c.streetNumber) ? (_d = this.value) === null || _d === void 0 ? void 0 : _d.streetNumber : ''}${((_e = this.value) === null || _e === void 0 ? void 0 : _e.postalCode) || ((_g = (_f = this.value) === null || _f === void 0 ? void 0 : _f.locality) === null || _g === void 0 ? void 0 : _g.long) ? ', ' : ''}${((_h = this.value) === null || _h === void 0 ? void 0 : _h.postalCode) ? (_j = this.value) === null || _j === void 0 ? void 0 : _j.postalCode : ''} ${((_l = (_k = this.value) === null || _k === void 0 ? void 0 : _k.locality) === null || _l === void 0 ? void 0 : _l.long) ? (_o = (_m = this.value) === null || _m === void 0 ? void 0 : _m.locality) === null || _o === void 0 ? void 0 : _o.long : ''}`;\n    }\n    syncAutoComplete($event) {\n        if (this.germanAddress) {\n            this.addressFormGroup.reset();\n        }\n        const germanAddress = parseGermanAddress($event);\n        this.germanAddress = germanAddress;\n        if (germanAddress.vicinity) {\n            this.addressFormGroup.get('vicinity').patchValue(germanAddress.vicinity, { emitEvent: false, onlySelf: true });\n        }\n        if (germanAddress.streetName) {\n            this.addressFormGroup.get('streetName').patchValue(germanAddress.streetName, { emitEvent: false, onlySelf: true });\n        }\n        if (germanAddress.streetNumber) {\n            this.addressFormGroup.get('streetNumber').patchValue(germanAddress.streetNumber.toString(), { emitEvent: false, onlySelf: true });\n        }\n        if (germanAddress.postalCode) {\n            this.addressFormGroup.get('postalCode').patchValue(germanAddress.postalCode, { emitEvent: false, onlySelf: true });\n        }\n        if (germanAddress.locality && germanAddress.locality.long) {\n            this.addressFormGroup.get('locality.long').patchValue(germanAddress.locality.long, { emitEvent: false, onlySelf: true });\n        }\n        this.value = germanAddress;\n        this.onGermanAddressMapped.emit(germanAddress);\n    }\n    writeValue(obj) {\n        let shouldRecreateFG = false;\n        if (obj) {\n            if (!this.value && this.firstInit) {\n                shouldRecreateFG = true;\n            }\n            this.value = obj;\n            if (shouldRecreateFG) {\n                this.createAddressFormGroup();\n                this.firstInit = false;\n            }\n        }\n    }\n    registerOnChange(fn) {\n        this.propagateChange = fn;\n    }\n    registerOnTouched(fn) {\n    }\n    setDisabledState(isDisabled) {\n    }\n}\nMatSearchGoogleMapsAutocompleteComponent.ɵfac = function MatSearchGoogleMapsAutocompleteComponent_Factory(t) { return new (t || MatSearchGoogleMapsAutocompleteComponent)(i0.ɵɵdirectiveInject(i1$1.UntypedFormBuilder)); };\nMatSearchGoogleMapsAutocompleteComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: MatSearchGoogleMapsAutocompleteComponent, selectors: [[\"mat-search-google-maps-autocomplete\"]], inputs: { searchBarAppearance: \"searchBarAppearance\", appearance: \"appearance\", searchAddressLabel: \"searchAddressLabel\", streetNameLabel: \"streetNameLabel\", streetNumberLabel: \"streetNumberLabel\", postalCodeLabel: \"postalCodeLabel\", localityLabel: \"localityLabel\", vicinityLabel: \"vicinityLabel\", showVicinity: \"showVicinity\", country: \"country\", placeIdOnly: \"placeIdOnly\", strictBounds: \"strictBounds\", types: \"types\", type: \"type\", readonly: \"readonly\", disableSearch: \"disableSearch\", _value: \"_value\", value: \"value\" }, outputs: { onGermanAddressMapped: \"onGermanAddressMapped\" }, features: [i0.ɵɵProvidersFeature([\n            {\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: forwardRef(() => MatSearchGoogleMapsAutocompleteComponent),\n                multi: true\n            }\n        ])], decls: 25, vars: 31, consts: [[\"fxLayout\", \"column\"], [\"fxFlex\", \"100\", 4, \"ngIf\"], [\"fxFlex\", \"\", \"fxLayoutGap\", \"10px\", 3, \"formGroup\"], [\"fxLayout\", \"row\", \"fxLayoutGap\", \"10px\"], [\"fxFlex\", \"80\", 3, \"appearance\"], [\"formControlName\", \"streetName\", \"matInput\", \"\", \"required\", \"\", 3, \"readonly\"], [\"fxFlex\", \"20\", 3, \"appearance\"], [\"formControlName\", \"streetNumber\", \"matInput\", \"\", \"required\", \"\", 3, \"readonly\"], [\"formControlName\", \"postalCode\", \"type\", \"number\", \"matInput\", \"\", \"required\", \"\", 3, \"readonly\"], [\"fxFlex\", \"auto\", 3, \"appearance\", 4, \"ngIf\"], [\"formGroupName\", \"locality\", \"fxFlex\", \"auto\"], [\"fxFlex\", \"auto\", 3, \"appearance\"], [\"formControlName\", \"long\", \"matInput\", \"\", \"required\", \"\", 3, \"readonly\"], [\"color\", \"primary\", \"matSuffix\", \"\"], [\"fxFlex\", \"100\"], [\"matGoogleMapsAutocomplete\", \"\", \"matInput\", \"\", \"required\", \"\", 3, \"country\", \"placeIdOnly\", \"strictBounds\", \"types\", \"type\", \"onAutocompleteSelected\"], [\"matInput\", \"\", \"formControlName\", \"vicinity\", 3, \"readonly\"]], template: function MatSearchGoogleMapsAutocompleteComponent_Template(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0);\n            i0.ɵɵtemplate(1, MatSearchGoogleMapsAutocompleteComponent_div_1_Template, 7, 11, \"div\", 1);\n            i0.ɵɵelementStart(2, \"form\", 2)(3, \"div\", 3)(4, \"mat-form-field\", 4)(5, \"mat-label\");\n            i0.ɵɵtext(6);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(7, \"input\", 5);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(8, \"mat-form-field\", 6)(9, \"mat-label\");\n            i0.ɵɵtext(10);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(11, \"input\", 7);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(12, \"div\", 3)(13, \"mat-form-field\", 6)(14, \"mat-label\");\n            i0.ɵɵtext(15);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(16, \"input\", 8);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(17, MatSearchGoogleMapsAutocompleteComponent_mat_form_field_17_Template, 4, 7, \"mat-form-field\", 9);\n            i0.ɵɵelementStart(18, \"div\", 10)(19, \"mat-form-field\", 11)(20, \"mat-label\");\n            i0.ɵɵtext(21);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(22, \"input\", 12);\n            i0.ɵɵelementStart(23, \"mat-icon\", 13);\n            i0.ɵɵtext(24, \"add_location\");\n            i0.ɵɵelementEnd()()()()()();\n        }\n        if (rf & 2) {\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", !ctx.disableSearch);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"formGroup\", ctx.addressFormGroup);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"appearance\", ctx.appearance)(\"@animate\", i0.ɵɵpureFunction1(20, _c1, i0.ɵɵpureFunction0(19, _c0)));\n            i0.ɵɵadvance(2);\n            i0.ɵɵtextInterpolate(ctx.streetNameLabel);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"readonly\", ctx.readonly);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"appearance\", ctx.appearance)(\"@animate\", i0.ɵɵpureFunction1(23, _c1, i0.ɵɵpureFunction0(22, _c0)));\n            i0.ɵɵadvance(2);\n            i0.ɵɵtextInterpolate(ctx.streetNumberLabel);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"readonly\", ctx.readonly);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"appearance\", ctx.appearance)(\"@animate\", i0.ɵɵpureFunction1(26, _c1, i0.ɵɵpureFunction0(25, _c0)));\n            i0.ɵɵadvance(2);\n            i0.ɵɵtextInterpolate(ctx.postalCodeLabel);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"readonly\", ctx.readonly);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.showVicinity);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"appearance\", ctx.appearance)(\"@animate\", i0.ɵɵpureFunction1(29, _c1, i0.ɵɵpureFunction0(28, _c0)));\n            i0.ɵɵadvance(2);\n            i0.ɵɵtextInterpolate(ctx.localityLabel);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"readonly\", ctx.readonly);\n        }\n    }, dependencies: [i2.NgIf, i1$1.ɵNgNoValidate, i1$1.DefaultValueAccessor, i1$1.NumberValueAccessor, i1$1.NgControlStatus, i1$1.NgControlStatusGroup, i1$1.RequiredValidator, i1$1.FormGroupDirective, i1$1.FormControlName, i1$1.FormGroupName, i3.DefaultLayoutDirective, i3.DefaultLayoutGapDirective, i3.DefaultFlexDirective, i4.MatFormField, i4.MatLabel, i4.MatSuffix, i5.MatInput, i6.MatIcon, MatGoogleMapsAutocompleteDirective], data: { animation: InputAnimations } });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSearchGoogleMapsAutocompleteComponent, [{\n            type: Component,\n            args: [{ selector: 'mat-search-google-maps-autocomplete', animations: InputAnimations, providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => MatSearchGoogleMapsAutocompleteComponent),\n                            multi: true\n                        }\n                    ], template: \"<div fxLayout=\\\"column\\\">\\n  <div *ngIf=\\\"!disableSearch\\\" fxFlex=\\\"100\\\">\\n    <!--search address-->\\n    <mat-form-field fxFlex=\\\"auto\\\" [appearance]=\\\"searchBarAppearance\\\" [@animate]=\\\"{ value: '*', params: { y: '100%' } }\\\">\\n      <mat-label>{{searchAddressLabel}}</mat-label>\\n      <input\\n        (onAutocompleteSelected)=\\\"syncAutoComplete($event)\\\"\\n        [country]=\\\"country\\\"\\n        [placeIdOnly]=\\\"placeIdOnly\\\"\\n        [strictBounds]=\\\"strictBounds\\\"\\n        [types]=\\\"types\\\"\\n        [type]=\\\"type\\\"\\n        matGoogleMapsAutocomplete\\n        matInput\\n        required\\n      />\\n      <mat-icon color=\\\"primary\\\" matSuffix>search</mat-icon>\\n      <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\\n    </mat-form-field>\\n  </div>\\n\\n  <form [formGroup]=\\\"addressFormGroup\\\" fxFlex fxLayoutGap=\\\"10px\\\">\\n    <div fxLayout=\\\"row\\\" fxLayoutGap=\\\"10px\\\">\\n      <mat-form-field fxFlex=\\\"80\\\"\\n                      [appearance]=\\\"appearance\\\"\\n                      [@animate]=\\\"{ value: '*', params: { y: '100%' } }\\\">\\n        <mat-label>{{streetNameLabel}}</mat-label>\\n        <input\\n          [readonly]=\\\"readonly\\\"\\n          formControlName=\\\"streetName\\\"\\n          matInput\\n          required\\n        />\\n        <!--        <mat-icon color=\\\"primary\\\" matSuffix>add_location</mat-icon>-->\\n        <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\\n      </mat-form-field>\\n      <mat-form-field fxFlex=\\\"20\\\" [appearance]=\\\"appearance\\\" [@animate]=\\\"{ value: '*', params: { y: '100%' } }\\\">\\n        <mat-label>{{streetNumberLabel}}</mat-label>\\n        <input\\n          [readonly]=\\\"readonly\\\"\\n          formControlName=\\\"streetNumber\\\"\\n          matInput\\n          required\\n        />\\n        <!--        <mat-icon color=\\\"primary\\\" matSuffix>add_location</mat-icon>-->\\n        <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\\n      </mat-form-field>\\n    </div>\\n    <div fxLayout=\\\"row\\\" fxLayoutGap=\\\"10px\\\">\\n      <mat-form-field fxFlex=\\\"20\\\" [appearance]=\\\"appearance\\\" [@animate]=\\\"{ value: '*', params: { y: '100%' } }\\\">\\n        <mat-label>{{postalCodeLabel}}</mat-label>\\n        <input\\n          [readonly]=\\\"readonly\\\"\\n          formControlName=\\\"postalCode\\\"\\n          type=\\\"number\\\"\\n          matInput\\n          required\\n        />\\n        <!--        <mat-icon color=\\\"primary\\\" matSuffix>add_location</mat-icon>-->\\n        <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\\n      </mat-form-field>\\n      <mat-form-field *ngIf=\\\"showVicinity\\\" fxFlex=\\\"auto\\\"\\n                      [appearance]=\\\"appearance\\\"\\n                      [@animate]=\\\"{ value: '*', params: { y: '100%' } }\\\">\\n        <mat-label>{{vicinityLabel}}</mat-label>\\n        <input\\n          [readonly]=\\\"readonly\\\"\\n          matInput\\n          formControlName=\\\"vicinity\\\"\\n        />\\n      </mat-form-field>\\n      <div formGroupName=\\\"locality\\\" fxFlex=\\\"auto\\\">\\n        <mat-form-field fxFlex=\\\"auto\\\" [appearance]=\\\"appearance\\\" [@animate]=\\\"{ value: '*', params: { y: '100%' } }\\\">\\n          <mat-label>{{localityLabel}}</mat-label>\\n          <input\\n            [readonly]=\\\"readonly\\\"\\n            formControlName=\\\"long\\\"\\n            matInput\\n            required\\n          />\\n          <mat-icon color=\\\"primary\\\" matSuffix>add_location</mat-icon>\\n          <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\\n        </mat-form-field>\\n      </div>\\n    </div>\\n  </form>\\n</div>\\n\" }]\n        }], function () { return [{ type: i1$1.UntypedFormBuilder }]; }, { searchBarAppearance: [{\n                type: Input\n            }], appearance: [{\n                type: Input\n            }], searchAddressLabel: [{\n                type: Input\n            }], streetNameLabel: [{\n                type: Input\n            }], streetNumberLabel: [{\n                type: Input\n            }], postalCodeLabel: [{\n                type: Input\n            }], localityLabel: [{\n                type: Input\n            }], vicinityLabel: [{\n                type: Input\n            }], showVicinity: [{\n                type: Input\n            }], country: [{\n                type: Input\n            }], placeIdOnly: [{\n                type: Input\n            }], strictBounds: [{\n                type: Input\n            }], types: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }], disableSearch: [{\n                type: Input\n            }], _value: [{\n                type: Input\n            }], onGermanAddressMapped: [{\n                type: Output\n            }], value: [{\n                type: Input\n            }] });\n})();\n\nclass MatGoogleMapsAutocompleteModule {\n}\nMatGoogleMapsAutocompleteModule.ɵfac = function MatGoogleMapsAutocompleteModule_Factory(t) { return new (t || MatGoogleMapsAutocompleteModule)(); };\nMatGoogleMapsAutocompleteModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: MatGoogleMapsAutocompleteModule });\nMatGoogleMapsAutocompleteModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [\n    // {\n    //   provide: NG_VALUE_ACCESSOR,\n    //   useExisting: forwardRef(() => MatGoogleMapsAutocompleteDirective),\n    //   multi: true\n    // }\n    ], imports: [CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        FlexLayoutModule,\n        MatInputModule,\n        MatIconModule] });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGoogleMapsAutocompleteModule, [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                        ReactiveFormsModule,\n                        FlexLayoutModule,\n                        MatInputModule,\n                        MatIconModule\n                    ],\n                    exports: [\n                        MatGoogleMapsAutocompleteComponent,\n                        MatGoogleMapsAutocompleteDirective,\n                        MatValidateAddressDirective,\n                        MatSearchGoogleMapsAutocompleteComponent\n                    ],\n                    declarations: [\n                        MatGoogleMapsAutocompleteComponent,\n                        MatGoogleMapsAutocompleteDirective,\n                        MatValidateAddressDirective,\n                        MatSearchGoogleMapsAutocompleteComponent\n                    ],\n                    providers: [\n                    // {\n                    //   provide: NG_VALUE_ACCESSOR,\n                    //   useExisting: forwardRef(() => MatGoogleMapsAutocompleteDirective),\n                    //   multi: true\n                    // }\n                    ]\n                }]\n        }], null, null);\n})();\n(function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(MatGoogleMapsAutocompleteModule, { declarations: [MatGoogleMapsAutocompleteComponent,\n            MatGoogleMapsAutocompleteDirective,\n            MatValidateAddressDirective,\n            MatSearchGoogleMapsAutocompleteComponent], imports: [CommonModule,\n            FormsModule,\n            ReactiveFormsModule,\n            FlexLayoutModule,\n            MatInputModule,\n            MatIconModule], exports: [MatGoogleMapsAutocompleteComponent,\n            MatGoogleMapsAutocompleteDirective,\n            MatValidateAddressDirective,\n            MatSearchGoogleMapsAutocompleteComponent] });\n})();\n\n/*\n * Public API Surface of google-maps-autocomplete\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Appearance, MatGoogleMapsAutocompleteComponent, MatGoogleMapsAutocompleteDirective, MatGoogleMapsAutocompleteModule, MatSearchGoogleMapsAutocompleteComponent, MatValidateAddressDirective, parseGermanAddress };\n//# sourceMappingURL=angular-material-extensions-google-maps-autocomplete.mjs.map\n","map":{"version":3,"file":"angular-material-extensions-google-maps-autocomplete.mjs","sources":["../../../../projects/angular-material-extensions/google-maps-autocomplete/src/lib/helpers/parser.ts","../../../../projects/angular-material-extensions/google-maps-autocomplete/src/lib/directives/address-validator/mat-address-validator.directive.ts","../../../../projects/angular-material-extensions/google-maps-autocomplete/src/lib/component/mat-google-maps-autocomplete.component.html","../../../../projects/angular-material-extensions/google-maps-autocomplete/src/lib/component/mat-google-maps-autocomplete.component.ts","../../../../projects/angular-material-extensions/google-maps-autocomplete/src/lib/animations/index.ts","../../../../projects/angular-material-extensions/google-maps-autocomplete/src/lib/directives/mat-google-maps-autocomplete.directive.ts","../../../../projects/angular-material-extensions/google-maps-autocomplete/src/lib/component/mat-search-google-maps-autocomplete/mat-search-google-maps-autocomplete.component.html","../../../../projects/angular-material-extensions/google-maps-autocomplete/src/lib/component/mat-search-google-maps-autocomplete/mat-search-google-maps-autocomplete.component.ts","../../../../projects/angular-material-extensions/google-maps-autocomplete/src/lib/mat-google-maps-autocomplete.module.ts","../../../../projects/angular-material-extensions/google-maps-autocomplete/src/public-api.ts","../../../../projects/angular-material-extensions/google-maps-autocomplete/src/angular-material-extensions-google-maps-autocomplete.ts"],"sourcesContent":["import PlaceResult = google.maps.places.PlaceResult;\nimport {GermanAddress} from '../interfaces';\n\nexport function parseGermanAddress(placeResult: PlaceResult): GermanAddress {\n  const germanAddress: GermanAddress = {\n    gmID: placeResult.id,\n    icon: placeResult.icon,\n    url: placeResult.url,\n    placeID: placeResult.place_id,\n    displayAddress: placeResult.formatted_address,\n    name: placeResult.name,\n    vicinity: placeResult.vicinity,\n    locality: {},\n    state: {},\n    country: {},\n    geoLocation: {latitude: -1, longitude: -1},\n  };\n\n  if (placeResult.geometry && placeResult.geometry.location) {\n    germanAddress.geoLocation.latitude = placeResult.geometry.location.lat();\n    germanAddress.geoLocation.longitude = placeResult.geometry.location.lng();\n  }\n\n  if (placeResult.address_components && placeResult.address_components.length > 0) {\n    placeResult.address_components.forEach(value => {\n      if (value.types.indexOf('street_number') > -1) {\n        germanAddress.streetNumber = value.short_name;\n      }\n      if (value.types.indexOf('route') > -1) {\n        germanAddress.streetName = value.long_name;\n      }\n      if (value.types.indexOf('postal_code') > -1) {\n        germanAddress.postalCode = Number(value.short_name);\n      }\n      if (value.types.indexOf('sublocality') > -1) {\n        germanAddress.sublocality = value.long_name;\n      }\n      if (value.types.indexOf('locality') > -1) {\n        germanAddress.locality.long = value.long_name;\n        germanAddress.locality.short = value.short_name;\n      }\n      if (value.types.indexOf('administrative_area_level_1') > -1) {\n        germanAddress.state.long = value.long_name;\n        germanAddress.state.short = value.short_name;\n      }\n      if (value.types.indexOf('country') > -1) {\n        germanAddress.country.long = value.long_name;\n        germanAddress.country.short = value.short_name;\n      }\n      if (value.types.indexOf('administrative_area_level_3') > -1) {\n        germanAddress.locality.short = value.short_name;\n      }\n    });\n  }\n  return germanAddress;\n}\n","import {Directive, EventEmitter, forwardRef} from '@angular/core';\nimport {AbstractControl, NG_VALIDATORS, ValidationErrors, Validator, ValidatorFn} from '@angular/forms';\nimport PlaceResult = google.maps.places.PlaceResult;\n\n// https://github.com/angular/angular/blob/master/packages/forms/src/directives/validators.ts\n\n@Directive({\n  selector: '[mat-address-validate][formControlName],[MatValidateAddress][formControl],[MatValidateAddress][ngModel]',\n  providers: [\n    {provide: NG_VALIDATORS, useExisting: forwardRef(() => MatValidateAddressDirective), multi: true}\n  ]\n})\nexport class MatValidateAddressDirective implements Validator {\n\n  public subscription: any;\n\n  private _address: PlaceResult;\n\n\n  constructor() {\n  }\n\n  public validate(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | any => {\n      return this.address ? null : {\n        validateAddress: {\n          valid: false\n        }\n      };\n    }\n  }\n\n  public subscribe(eventEmitter: EventEmitter<any>) {\n    this.subscription = eventEmitter.subscribe((address: PlaceResult) => {\n      this.address = address;\n    });\n  }\n\n  public unsubscribe() {\n    this.subscription.unsubscribe();\n  }\n\n  get address() {\n    return this._address;\n  }\n\n  set address(value) {\n    this._address = value;\n  }\n}\n","<mat-form-field class=\"full-width\" [appearance]=\"appearance\">\n  <mat-label>{{addressLabelText}}</mat-label>\n  <input matInput\n         [(ngModel)]=\"address\"\n         (change)=\"onQuery($event)\"\n         placeholder=\"{{placeholderText}}\"\n         class=\"form-control\"\n         #search\n         MatValidateAddress\n         required>\n  <mat-error *ngIf=\"addressSearchControl.hasError('required')\">\n    {{requiredErrorText}}\n  </mat-error>\n  <mat-error *ngIf=\"addressSearchControl.hasError('validateAddress')\">\n    {{invalidErrorText}}\n  </mat-error>\n</mat-form-field>\n","import {Component, ElementRef, EventEmitter, forwardRef, Input, NgZone, OnInit, Output, ViewChild} from '@angular/core';\nimport {ControlValueAccessor, UntypedFormControl, NG_VALUE_ACCESSOR, Validators} from '@angular/forms';\nimport {MapsAPILoader} from '@agm/core';\nimport {MatValidateAddressDirective} from '../directives/address-validator/mat-address-validator.directive';\nimport {Location} from '../interfaces/location.interface';\nimport {GermanAddress} from '../interfaces';\nimport PlaceResult = google.maps.places.PlaceResult;\nimport AutocompleteOptions = google.maps.places.AutocompleteOptions;\n\nexport enum Appearance {\n  STANDARD = 'standard',\n  FILL = 'fill',\n  OUTLINE = 'outline',\n  LEGACY = 'legacy',\n}\n\n@Component({\n  selector: 'mat-google-maps-autocomplete',\n  exportAs: 'matGoogleMapsAutocomplete',\n  templateUrl: './mat-google-maps-autocomplete.component.html',\n  styleUrls: ['./mat-google-maps-autocomplete.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MatGoogleMapsAutocompleteComponent),\n      multi: true\n    }\n  ]\n})\nexport class MatGoogleMapsAutocompleteComponent implements OnInit, ControlValueAccessor {\n\n  @ViewChild('search')\n  public searchElementRef: ElementRef;\n\n  @Input()\n  addressLabelText = 'Address';\n\n  @Input()\n  placeholderText = 'Please enter the address';\n\n  @Input()\n  requiredErrorText = 'The address is required';\n\n  @Input()\n  invalidErrorText = 'The address is not valid';\n\n  @Input()\n  appearance: string | Appearance = Appearance.STANDARD;\n\n  @Input()\n  value: PlaceResult;\n\n  @Input()\n  address: PlaceResult | string;\n\n  @Input()\n  country: string | string[];\n\n  @Input()\n  placeIdOnly?: boolean;\n\n  @Input()\n  strictBounds?: boolean;\n\n  @Input()\n  types?: string[];\n  // types: string[] = ['address'];\n\n  @Input()\n  type?: string;\n\n  @Input()\n  autoCompleteOptions: AutocompleteOptions = {};\n\n  @Output()\n  onChange: EventEmitter<PlaceResult | string | null> = new EventEmitter<PlaceResult | string | null>();\n\n  @Output()\n  onAutocompleteSelected: EventEmitter<PlaceResult> = new EventEmitter<PlaceResult>();\n\n  @Output()\n  onGermanAddressMapped: EventEmitter<GermanAddress> = new EventEmitter<GermanAddress>();\n\n  @Output()\n  onLocationSelected: EventEmitter<Location> = new EventEmitter<Location>();\n\n\n  private onNewPlaceResult: EventEmitter<any> = new EventEmitter();\n  private addressValidator: MatValidateAddressDirective = new MatValidateAddressDirective();\n\n  public addressSearchControl: UntypedFormControl = new UntypedFormControl({value: null}, Validators.compose([\n    Validators.required,\n    this.addressValidator.validate()])\n  );\n\n  propagateChange = (_: any) => {\n  };\n\n  constructor(private mapsAPILoader: MapsAPILoader,\n              private ngZone: NgZone) {\n  }\n\n  ngOnInit(): void {\n    this.addressValidator.subscribe(this.onNewPlaceResult);\n\n    const options: AutocompleteOptions = {\n      // types: ['address'],\n      // componentRestrictions: {country: this.country},\n      placeIdOnly: this.placeIdOnly,\n      strictBounds: this.strictBounds,\n      // types: this.types,\n      type: this.type\n    };\n\n    // tslint:disable-next-line:no-unused-expression\n    this.country ? options.componentRestrictions = {country: this.country} : null;\n    // tslint:disable-next-line:no-unused-expression\n    this.country ? options.types = this.types : null;\n\n    this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);\n    this.initGoogleMapsAutocomplete();\n  }\n\n  public initGoogleMapsAutocomplete() {\n    this.mapsAPILoader\n      .load()\n      .then(() => {\n        const autocomplete = new google.maps.places.Autocomplete(this.searchElementRef.nativeElement, this.autoCompleteOptions);\n        autocomplete.addListener('place_changed', () => {\n          this.ngZone.run(() => {\n            // get the place result\n            const place: PlaceResult = autocomplete.getPlace();\n\n            const germanAddress: GermanAddress = {\n              gmID: place.id,\n              icon: place.icon,\n              url: place.url,\n              placeID: place.place_id,\n              displayAddress: place.formatted_address,\n              name: place.name,\n              vicinity: place.vicinity,\n              locality: {},\n              state: {},\n              country: {},\n              geoLocation: {latitude: -1, longitude: -1},\n            };\n\n            if (place.geometry && place.geometry.location) {\n              germanAddress.geoLocation.latitude = place.geometry.location.lat();\n              germanAddress.geoLocation.longitude = place.geometry.location.lng();\n            }\n\n            if(place.address_components) {\n              place.address_components.forEach(value => {\n                if (value.types.indexOf('street_number') > -1) {\n                  germanAddress.streetNumber = value.short_name;\n                }\n                if (value.types.indexOf('route') > -1) {\n                  germanAddress.streetName = value.long_name;\n                }\n                if (value.types.indexOf('postal_code') > -1) {\n                  germanAddress.postalCode = Number(value.short_name);\n                }\n                if (value.types.indexOf('sublocality') > -1) {\n                  germanAddress.sublocality = value.long_name;\n                }\n                if (value.types.indexOf('locality') > -1) {\n                  germanAddress.locality.long = value.long_name;\n                  germanAddress.locality.short = value.short_name;\n                }\n                if (value.types.indexOf('administrative_area_level_1') > -1) {\n                  germanAddress.state.long = value.long_name;\n                  germanAddress.state.short = value.short_name;\n                }\n                if (value.types.indexOf('country') > -1) {\n                  germanAddress.country.long = value.long_name;\n                  germanAddress.country.short = value.short_name;\n                }\n                if (value.types.indexOf('administrative_area_level_3') > -1) {\n                  germanAddress.locality.short = value.short_name;\n                }\n              });\n            }\n\n            this.onGermanAddressMapped.emit(germanAddress);\n\n            if (!place.place_id || place.geometry === undefined || place.geometry === null) {\n              // place result is not valid\n              return;\n            } else {\n              // show dialog to select a address from the input\n              // emit failed event\n              this.value = place;\n              this.propagateChange(this.value)\n            }\n            this.address = place.formatted_address;\n            this.onAutocompleteSelected.emit(place);\n            // console.log('onAutocompleteSelected -> ', place);\n            this.onLocationSelected.emit(\n              {\n                latitude: place.geometry.location.lat(),\n                longitude: place.geometry.location.lng()\n              });\n          });\n        });\n      })\n      .catch((err) => console.log(err));\n  }\n\n  public onQuery(event: any) {\n    // console.log('onChange()', event);\n    this.onChange.emit(this.address);\n  }\n\n  private resetAddress() {\n    this.address = null;\n    this.addressSearchControl.updateValueAndValidity();\n  }\n\n  writeValue(obj: any): void {\n    if (obj) {\n      this.value = obj;\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    throw new Error('Method not implemented.');\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    throw new Error('Method not implemented.');\n  }\n\n}\n","import {animate, animateChild, animation, query, stagger, state, style, transition, trigger, useAnimation} from '@angular/animations';\n\nconst customAnimation = animation(\n  [\n    style({\n      opacity: '{{opacity}}',\n      transform: 'scale({{scale}}) translate3d({{x}}, {{y}}, {{z}})'\n    }),\n    animate('{{duration}} {{delay}} cubic-bezier(0.0, 0.0, 0.2, 1)', style('*'))\n  ],\n  {\n    params: {\n      duration: '200ms',\n      delay: '0ms',\n      opacity: '0',\n      scale: '1',\n      x: '0',\n      y: '0',\n      z: '0'\n    }\n  }\n);\n\nexport const InputAnimations = [\n  trigger('animate', [transition('void => *', [useAnimation(customAnimation)])]),\n\n  trigger('animateStagger', [\n    state('50', style('*')),\n    state('100', style('*')),\n    state('200', style('*')),\n\n    transition('void => 50', query('@*', [stagger('50ms', [animateChild()])], {optional: true})),\n    transition('void => 100', query('@*', [stagger('100ms', [animateChild()])], {optional: true})),\n    transition('void => 200', query('@*', [stagger('200ms', [animateChild()])], {optional: true}))\n  ]),\n];\n","import {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  HostListener,\n  Inject,\n  Input,\n  NgZone,\n  OnInit,\n  Output,\n  PLATFORM_ID\n} from '@angular/core';\nimport {ControlValueAccessor, FormControl, NG_VALIDATORS, Validators} from '@angular/forms';\nimport {MapsAPILoader} from '@agm/core';\nimport {GermanAddress, Location} from '../interfaces';\nimport {isPlatformBrowser} from '@angular/common';\nimport PlaceResult = google.maps.places.PlaceResult;\nimport AutocompleteOptions = google.maps.places.AutocompleteOptions;\n\n@Directive({\n  selector: '[matGoogleMapsAutocomplete]',\n  exportAs: 'matGoogleMapsAutocomplete',\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => MatGoogleMapsAutocompleteDirective),\n      multi: true\n    }\n  ]\n})\nexport class MatGoogleMapsAutocompleteDirective implements OnInit, ControlValueAccessor {\n\n  @Input()\n  address: PlaceResult | string;\n\n  @Input()\n  country: string | string[];\n\n  @Input()\n  placeIdOnly?: boolean;\n\n  @Input()\n  strictBounds?: boolean;\n\n  @Input()\n  types?: string[];\n\n  @Input()\n  type?: string;\n\n  @Input()\n  autoCompleteOptions: AutocompleteOptions = {};\n\n  @Output()\n  onChange: EventEmitter<PlaceResult | string | null> = new EventEmitter<PlaceResult | string | null>();\n\n  @Output()\n  onAutocompleteSelected: EventEmitter<PlaceResult> = new EventEmitter<PlaceResult>();\n\n  @Output()\n  onGermanAddressMapped: EventEmitter<GermanAddress> = new EventEmitter<GermanAddress>();\n\n  @Output()\n  onLocationSelected: EventEmitter<Location> = new EventEmitter<Location>();\n\n  disabled: boolean\n\n  _value: string;\n\n  get value(): string {\n    return this._value;\n  }\n\n  @Input()\n  set value(value: string) {\n    this._value = value;\n    this.propagateChange(this.value);\n    this.cf.markForCheck();\n  }\n\n  private onNewPlaceResult: EventEmitter<any> = new EventEmitter();\n\n  propagateChange = (_: any) => {\n  };\n\n  constructor(@Inject(PLATFORM_ID) public platformId: string,\n              public elemRef: ElementRef,\n              public mapsAPILoader: MapsAPILoader,\n              private cf: ChangeDetectorRef,\n              private ngZone: NgZone) {\n  }\n\n  ngOnInit(): void {\n    console.log('validator', this)\n    if (isPlatformBrowser(this.platformId)) {\n      const options: AutocompleteOptions = {\n        // types: ['address'],\n        // componentRestrictions: {country: this.country},\n        placeIdOnly: this.placeIdOnly,\n        strictBounds: this.strictBounds,\n        // types: this.types,\n        type: this.type\n      };\n\n      // tslint:disable-next-line:no-unused-expression\n      this.country ? options.componentRestrictions = {country: this.country} : null;\n      // tslint:disable-next-line:no-unused-expression\n      this.country ? options.types = this.types : null;\n\n      this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);\n      this.initGoogleMapsAutocomplete();\n    }\n  }\n\n  validate(fc: FormControl) {\n    return fc.hasValidator(Validators.required) ? !!fc?.value : true;\n  }\n\n  @HostListener('change')\n  onChangeInputValue(): void {\n    const value = (this.elemRef.nativeElement as HTMLInputElement)?.value;\n    this.value = value;\n  }\n\n  public initGoogleMapsAutocomplete() {\n    this.mapsAPILoader\n      .load()\n      .then(() => {\n        const autocomplete = new google.maps.places.Autocomplete(this.elemRef.nativeElement, this.autoCompleteOptions);\n        autocomplete.addListener('place_changed', () => {\n          this.ngZone.run(() => {\n            // get the place result\n            const place: PlaceResult = autocomplete.getPlace();\n\n            const germanAddress: GermanAddress = {\n              gmID: place.id,\n              icon: place.icon,\n              url: place.url,\n              placeID: place.place_id,\n              displayAddress: place.formatted_address,\n              name: place.name,\n              vicinity: place.vicinity,\n              locality: {},\n              state: {},\n              country: {},\n              geoLocation: {latitude: -1, longitude: -1},\n            };\n\n            if (place.geometry && place.geometry.location) {\n              germanAddress.geoLocation.latitude = place.geometry.location.lat();\n              germanAddress.geoLocation.longitude = place.geometry.location.lng();\n            }\n\n            place.address_components.forEach(value => {\n              if (value.types.indexOf('street_number') > -1) {\n                germanAddress.streetNumber = value.short_name;\n              }\n              if (value.types.indexOf('route') > -1) {\n                germanAddress.streetName = value.long_name;\n              }\n              if (value.types.indexOf('postal_code') > -1) {\n                germanAddress.postalCode = Number(value.short_name);\n              }\n              if (value.types.indexOf('sublocality') > -1) {\n                germanAddress.sublocality = value.long_name;\n              }\n              if (value.types.indexOf('locality') > -1) {\n                germanAddress.locality.long = value.long_name;\n                germanAddress.locality.short = value.short_name;\n              }\n              if (value.types.indexOf('administrative_area_level_1') > -1) {\n                germanAddress.state.long = value.long_name;\n                germanAddress.state.short = value.short_name;\n              }\n              if (value.types.indexOf('country') > -1) {\n                germanAddress.country.long = value.long_name;\n                germanAddress.country.short = value.short_name;\n              }\n              if (value.types.indexOf('administrative_area_level_3') > -1) {\n                germanAddress.locality.short = value.short_name;\n              }\n            });\n\n            this.onGermanAddressMapped.emit(germanAddress);\n\n            this.value = place.formatted_address;\n            this.address = place.formatted_address;\n            this.onAutocompleteSelected.emit(place);\n            this.onLocationSelected.emit(\n              {\n                latitude: place.geometry.location.lat(),\n                longitude: place.geometry.location.lng()\n              });\n          });\n        });\n      })\n      .catch((err) => console.log(err));\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  writeValue(obj: any): void {\n    if (obj) {\n      this.value = obj;\n    }\n  }\n\n}\n","<div fxLayout=\"column\">\n  <div *ngIf=\"!disableSearch\" fxFlex=\"100\">\n    <!--search address-->\n    <mat-form-field fxFlex=\"auto\" [appearance]=\"searchBarAppearance\" [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n      <mat-label>{{searchAddressLabel}}</mat-label>\n      <input\n        (onAutocompleteSelected)=\"syncAutoComplete($event)\"\n        [country]=\"country\"\n        [placeIdOnly]=\"placeIdOnly\"\n        [strictBounds]=\"strictBounds\"\n        [types]=\"types\"\n        [type]=\"type\"\n        matGoogleMapsAutocomplete\n        matInput\n        required\n      />\n      <mat-icon color=\"primary\" matSuffix>search</mat-icon>\n      <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n    </mat-form-field>\n  </div>\n\n  <form [formGroup]=\"addressFormGroup\" fxFlex fxLayoutGap=\"10px\">\n    <div fxLayout=\"row\" fxLayoutGap=\"10px\">\n      <mat-form-field fxFlex=\"80\"\n                      [appearance]=\"appearance\"\n                      [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n        <mat-label>{{streetNameLabel}}</mat-label>\n        <input\n          [readonly]=\"readonly\"\n          formControlName=\"streetName\"\n          matInput\n          required\n        />\n        <!--        <mat-icon color=\"primary\" matSuffix>add_location</mat-icon>-->\n        <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n      </mat-form-field>\n      <mat-form-field fxFlex=\"20\" [appearance]=\"appearance\" [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n        <mat-label>{{streetNumberLabel}}</mat-label>\n        <input\n          [readonly]=\"readonly\"\n          formControlName=\"streetNumber\"\n          matInput\n          required\n        />\n        <!--        <mat-icon color=\"primary\" matSuffix>add_location</mat-icon>-->\n        <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n      </mat-form-field>\n    </div>\n    <div fxLayout=\"row\" fxLayoutGap=\"10px\">\n      <mat-form-field fxFlex=\"20\" [appearance]=\"appearance\" [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n        <mat-label>{{postalCodeLabel}}</mat-label>\n        <input\n          [readonly]=\"readonly\"\n          formControlName=\"postalCode\"\n          type=\"number\"\n          matInput\n          required\n        />\n        <!--        <mat-icon color=\"primary\" matSuffix>add_location</mat-icon>-->\n        <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n      </mat-form-field>\n      <mat-form-field *ngIf=\"showVicinity\" fxFlex=\"auto\"\n                      [appearance]=\"appearance\"\n                      [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n        <mat-label>{{vicinityLabel}}</mat-label>\n        <input\n          [readonly]=\"readonly\"\n          matInput\n          formControlName=\"vicinity\"\n        />\n      </mat-form-field>\n      <div formGroupName=\"locality\" fxFlex=\"auto\">\n        <mat-form-field fxFlex=\"auto\" [appearance]=\"appearance\" [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n          <mat-label>{{localityLabel}}</mat-label>\n          <input\n            [readonly]=\"readonly\"\n            formControlName=\"long\"\n            matInput\n            required\n          />\n          <mat-icon color=\"primary\" matSuffix>add_location</mat-icon>\n          <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n        </mat-form-field>\n      </div>\n    </div>\n  </form>\n</div>\n","import {Component, EventEmitter, forwardRef, Input, OnInit, Output} from '@angular/core';\nimport {ControlValueAccessor, UntypedFormBuilder, UntypedFormGroup, NG_VALUE_ACCESSOR, Validators} from '@angular/forms';\n\nimport {parseGermanAddress} from '../../helpers/parser';\nimport {GermanAddress} from '../../interfaces';\nimport {Appearance} from '../mat-google-maps-autocomplete.component';\nimport {InputAnimations} from '../../animations';\nimport {debounceTime, distinctUntilChanged, takeUntil} from 'rxjs/operators';\nimport {Subject} from 'rxjs';\n\n@Component({\n  selector: 'mat-search-google-maps-autocomplete',\n  templateUrl: './mat-search-google-maps-autocomplete.component.html',\n  styleUrls: ['./mat-search-google-maps-autocomplete.component.scss'],\n  animations: InputAnimations,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MatSearchGoogleMapsAutocompleteComponent),\n      multi: true\n    }\n  ]\n})\nexport class MatSearchGoogleMapsAutocompleteComponent implements OnInit, ControlValueAccessor {\n\n  constructor(private formBuilder: UntypedFormBuilder) {\n    // Set the private defaults\n    this._unsubscribeAll = new Subject();\n  }\n\n  @Input()\n  searchBarAppearance: string | Appearance;\n\n  @Input()\n  appearance: string | Appearance = Appearance.STANDARD;\n\n  @Input()\n  searchAddressLabel = 'Search Address';\n\n  @Input()\n  streetNameLabel = 'Street';\n\n  @Input()\n  streetNumberLabel = 'Nr.';\n\n  @Input()\n  postalCodeLabel = 'PLZ';\n\n  @Input()\n  localityLabel = 'Locality';\n\n  @Input()\n  vicinityLabel = 'Vicinity';\n\n  @Input()\n  showVicinity: boolean;\n\n  @Input()\n  country: string | string[];\n\n  @Input()\n  placeIdOnly?: boolean;\n\n  @Input()\n  strictBounds?: boolean;\n\n  @Input()\n  types?: string[];\n  // types: string[] = ['address'];\n\n  @Input()\n  type?: string;\n\n  @Input()\n  readonly: boolean;\n\n  @Input()\n  disableSearch: boolean;\n\n  @Input() private _value: GermanAddress;\n\n  @Output()\n  onGermanAddressMapped: EventEmitter<GermanAddress> = new EventEmitter<GermanAddress>();\n\n  germanAddress: GermanAddress;\n  addressFormGroup: UntypedFormGroup;\n\n  firstInit = true;\n\n  // Private\n  private _unsubscribeAll: Subject<any>;\n\n  propagateChange = (_: any) => {\n  };\n\n\n  get value(): GermanAddress {\n    return this._value;\n  }\n\n  @Input()\n  set value(value: GermanAddress) {\n    this._value = value;\n    this.propagateChange(this.value);\n    // console.log('setValue', this._value);\n  }\n\n  ngOnInit() {\n    this.createAddressFormGroup();\n    this.enableCustomInput();\n  }\n\n  createAddressFormGroup(): void {\n    this.addressFormGroup = this.formBuilder.group({\n      streetName: [this.value && this.value.streetName ? this.value.streetName : null, Validators.required],\n      streetNumber: [this.value && this.value.streetNumber ? this.value.streetNumber : null, Validators.required],\n      postalCode: [this.value && this.value.postalCode ? this.value.postalCode : null, Validators.required],\n      vicinity: [this.value && this.value.vicinity ? this.value.vicinity : null],\n      locality: this.formBuilder.group({\n        long: [this.value && this.value.locality && this.value.locality.long ? this.value.locality.long : null, Validators.required],\n      }),\n    });\n  }\n\n  enableCustomInput() {\n    this.addressFormGroup\n      .get('streetName')\n      .valueChanges\n      .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))\n      .subscribe(streetName => {\n        !this.value ? this.value = {streetName} : this.value.streetName = streetName;\n        this.value.displayAddress = this.parseDisplayAddress();\n        this.propagateChange(this.value);\n      });\n    this.addressFormGroup\n      .get('streetNumber')\n      .valueChanges\n      .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))\n      .subscribe(streetNumber => {\n        !this.value ? this.value = {streetNumber} : this.value.streetNumber = streetNumber;\n        this.value.displayAddress = this.parseDisplayAddress();\n        this.propagateChange(this.value);\n      });\n    this.addressFormGroup\n      .get('postalCode')\n      .valueChanges\n      .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))\n      .subscribe(postalCode => {\n        !this.value ? this.value = {postalCode} : this.value.postalCode = postalCode;\n        this.value.displayAddress = this.parseDisplayAddress();\n        this.propagateChange(this.value);\n      });\n    this.addressFormGroup\n      .get('vicinity')\n      .valueChanges\n      .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))\n      .subscribe(vicinity => {\n        !this.value ? this.value = {vicinity} : this.value.vicinity = vicinity;\n        this.value.displayAddress = this.parseDisplayAddress();\n        this.propagateChange(this.value);\n      });\n    this.addressFormGroup\n      .get('locality')\n      .valueChanges\n      .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))\n      .subscribe(locality => {\n        !this.value ? this.value = {locality} : this.value.locality = locality;\n        this.value.displayAddress = this.parseDisplayAddress();\n        this.propagateChange(this.value);\n      });\n  }\n\n  parseDisplayAddress() {\n    return `${this.value?.streetName ? this.value?.streetName : ''} ${this.value?.streetNumber ? this.value?.streetNumber : ''}${this.value?.postalCode || this.value?.locality?.long ? ', ' : ''}${this.value?.postalCode ? this.value?.postalCode : ''} ${this.value?.locality?.long ? this.value?.locality?.long : ''}`\n  }\n\n  syncAutoComplete($event: google.maps.places.PlaceResult) {\n    if (this.germanAddress) {\n      this.addressFormGroup.reset();\n    }\n    const germanAddress: GermanAddress = parseGermanAddress($event);\n    this.germanAddress = germanAddress;\n    if (germanAddress.vicinity) {\n      this.addressFormGroup.get('vicinity').patchValue(germanAddress.vicinity, {emitEvent: false, onlySelf: true});\n    }\n    if (germanAddress.streetName) {\n      this.addressFormGroup.get('streetName').patchValue(germanAddress.streetName, {emitEvent: false, onlySelf: true});\n    }\n    if (germanAddress.streetNumber) {\n      this.addressFormGroup.get('streetNumber').patchValue(germanAddress.streetNumber.toString(), {emitEvent: false, onlySelf: true});\n    }\n    if (germanAddress.postalCode) {\n      this.addressFormGroup.get('postalCode').patchValue(germanAddress.postalCode, {emitEvent: false, onlySelf: true});\n    }\n    if (germanAddress.locality && germanAddress.locality.long) {\n      this.addressFormGroup.get('locality.long').patchValue(germanAddress.locality.long, {emitEvent: false, onlySelf: true});\n    }\n\n    this.value = germanAddress;\n    this.onGermanAddressMapped.emit(germanAddress);\n  }\n\n  writeValue(obj: any): void {\n    let shouldRecreateFG = false;\n    if (obj) {\n      if (!this.value && this.firstInit) {\n        shouldRecreateFG = true;\n      }\n      this.value = obj;\n      if (shouldRecreateFG) {\n        this.createAddressFormGroup();\n        this.firstInit = false;\n      }\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n  }\n\n}\n","import {CommonModule} from '@angular/common';\nimport {forwardRef, NgModule} from '@angular/core';\nimport {FlexLayoutModule} from '@angular/flex-layout';\nimport {FormsModule, NG_VALUE_ACCESSOR, ReactiveFormsModule} from '@angular/forms';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatGoogleMapsAutocompleteDirective} from './directives/mat-google-maps-autocomplete.directive';\nimport {MatValidateAddressDirective} from './directives/address-validator/mat-address-validator.directive';\n// tslint:disable-next-line:max-line-length\nimport {MatGoogleMapsAutocompleteComponent, MatSearchGoogleMapsAutocompleteComponent} from './component';\n\n\n@NgModule({\n  imports:\n    [\n      CommonModule,\n      FormsModule,\n      ReactiveFormsModule,\n      FlexLayoutModule,\n      MatInputModule,\n      MatIconModule\n    ],\n  exports: [\n    MatGoogleMapsAutocompleteComponent,\n    MatGoogleMapsAutocompleteDirective,\n    MatValidateAddressDirective,\n    MatSearchGoogleMapsAutocompleteComponent\n  ],\n  declarations: [\n    MatGoogleMapsAutocompleteComponent,\n    MatGoogleMapsAutocompleteDirective,\n    MatValidateAddressDirective,\n    MatSearchGoogleMapsAutocompleteComponent\n  ],\n  providers: [\n    // {\n    //   provide: NG_VALUE_ACCESSOR,\n    //   useExisting: forwardRef(() => MatGoogleMapsAutocompleteDirective),\n    //   multi: true\n    // }\n  ]\n})\nexport class MatGoogleMapsAutocompleteModule {\n}\n","/*\n * Public API Surface of google-maps-autocomplete\n */\n\nexport * from './lib/helpers/parser';\nexport * from './lib/interfaces';\nexport * from './lib/component';\nexport * from './lib/directives/mat-google-maps-autocomplete.directive';\nexport * from './lib/directives/address-validator/mat-address-validator.directive';\nexport * from './lib/mat-google-maps-autocomplete.module';\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1"],"mappings":"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"}}}